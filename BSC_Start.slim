initialize() {
	initializeSLiMModelType("WF"); // means that population size can not change dynamically -> WF model
	//turning on pedigree tracking, as relatedness
	initializeSLiMOptions(keepPedigrees = T);
	initializeMutationRate(1e-5); //defining mutation rate
	initializeMutationType("m1", 0.5, "f", 0.0); //mutation type m1 is has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g1", m1, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g1, 0, 99999); //g1 has length 10'000 bases, maybe change -> second genomic element?
	initializeRecombinationRate(1e-7); // specifies recombination rate

	initializeSex("A"); //creates males and females in the population

	// define some variables
	
	//defineConstant("K_p1", 140);     // carrying capacity of captive pop

	//defineConstant("ms",management_strategy);			//Management-strategy  - would be nice to have it soft coded -> Do this in R i guess. 
	//defineConstant("K_p2", 86); // define carrying capacity for the p2: 86 individuals -> Use later!
}

1 early() {
	//defining population size at the beginning
	sim.addSubpop("p1", 10000); //large starting population of 10'000 individuals
}

//bottleneck kicks in after 100 generations
//100 early() {

100 early() { p1.setSubpopulationSize(16); }
	// Randomly select 16 survivors
    //remainingInds = sample(p1.individuals, 16);
    
    // Reset population p1 to these 16 individuals
   // p1.subsetIndividuals(remainingInds);
    
    //cat("Population reduced to 16 individuals due to drift.\n");
//}


//Non-ranodom mating for 30 years due to breeding programs

//mating according to the pedigree data...? -> Add later, first/now non-random mating selecting for low kinship


101:130 early() {
    //Every individual gets to mate in each generation, selecting for low kinship... (p1 = captive population)
	// Randomly shuffle individuals to prevent bias - this line creates a new list where every individual from p1 gets picked only once
   // shuffledInds = sample(p1.individuals, size(p1.individuals), replace = F);
    
    // Remove the last individual from shuffledInds if the number is odd to make the size even
  //  if (size(shuffledInds) % 2 == 1) { //if the size is odd, we have a problem -> one will not get to mate
     //   shuffledInds = shuffledInds[0:(size(shuffledInds)-1)]; //-1 since we want to get rid of one ind. -> last one from list will not mate (randomly)
   // }

    //Create an empty list to store pairs
   // paired = c();


    //Find optimal pairings, until all individuals are paired (until shuffledIns = 0)
    
//CReate new objects containing either females or males
females = p1.individuals[p1.individuals.sex == "F"];   
males = p1.individuals[p1.individuals.sex == "M"];
    
    
    
    while (size(females) > 0) {
    
    
        reproduction() {
        ind1 = females[0]; // Pick the first available female
        females = females[1:(size(females)-1)]; // Remove it from the list, -1 to not go out of bound (starts from 0)

        // Find the least related mate from the remaining individuals
        bestMate = min(ind1.relatedness(males));

        // Pair them
        //ind1.setMate(bestMate);
        
        // Remove bestMate from the available list
        //males = males - bestMate;

        // Store the pairing
        //paired = c(paired, c(ind1, bestMate));
        

         // Add offspring from this specific mating --> How many per pair??
        p1.addCrossed(ind1, bestMate, count=1);
        
		}
        
        
   	}

    cat("Optimal mate pairings completed.\n");
    cat(ind1);
    //Here i could maybe print out more - maybe i could carry on the pedigree with these pairings...?
    
 
}

131 early() {
    // Randomly select 9 individuals from p1
    reintroducedInd = sample(p1.individuals, 9);

    // Create the new subpopulation p2 using those individuals - carrying capacity of this population should be 43 breeding pairs, so 86 individuals. 
    sim.addSubpop("p2", 0); // we start with an empty population, which will consist of the reintroduced individuals
    
    // Move the selected individuals from p1 to p2
    p2.takeMigrants(reintroducedInd);
    
    cat("9 individuals have been reintroduced from p1 to form p2.\n");
    
    // Maybe print which individuals have been selected and how they are related...
    //here i could include a command which tells me if i have enough individuals in p1 to remove some....
}

// controlled breeding to minimize inbreeding
131:231 mateChoice(p1) {

	//Every individual gets to mate in each generation, selecting for low kinship... (p1 = captive population)
	// Randomly shuffle individuals to prevent bias - this line creates a new list where every individual from p1 gets picked only once
    shuffledInds = sample(p1.individuals, size(p1.individuals), replace = F);
    
    // Remove the last individual from shuffledInds if the number is odd to make the size even
    if (size(shuffledInds) % 2 == 1) { //if the size is odd, SLiM will have a problem -> one will not get to mate
        shuffledInds = shuffledInds[0:(size(shuffledInds)-1)]; //-1 since we want to get rid of one ind. -> last one from list will not mate (randomly)
    }

    //Create an empty list to store pairs
    paired = c();

    //Find optimal pairings, until all individuals are paired (until shuffledIns = 0)
    while (size(shuffledInds) > 0) {
        ind1 = shuffledInds[0]; // Pick the first available individual
       shuffledInds = shuffledInds[1:(size(shuffledInds)-1)]; // Remove it from the list

        // Find the least related mate from the remaining individuals
        bestMate = shuffledInds.minByValue(ind1.relatedness(shuffledInds));

        // Pair them
        ind1.setMate(bestMate);
        
        // Remove bestMate from the available list
        shuffledInds = shuffledInds - bestMate;

        // Store the pairing
        paired = c(paired, c(ind1, bestMate));
    }

    cat("Optimal mate pairings completed.\n");
    //Here i could maybe print out more - maybe i could carry on the pedigree with these pairings...?
}


131:231 mateChoice(p2) {

//here i want random mating amongst all individuals in p2 -> Every individual gets to mate in each generation at random

// Randomly shuffle individuals to prevent bias
    shuffledInds = sample(p2.individuals, size(p2.individuals), replace = F);
    if (size(shuffledInds) % 2 == 1) { //if the size is odd, we have a problem -> one will not get to mate
    // Remove the last individual from shuffledInds to make the size even
    shuffledInds = shuffledInds[0:(size(shuffledInds)-1)]; //-1 since we want to get rid of one ind.
    
        //Pair individuals randomly
    for (i in seq(0, size(shuffledInds)-2, by=2)) { 
        ind1 = shuffledInds[i];  
        ind2 = shuffledInds[i+1]; // The next individual in the shuffled list

        //Force this pair to mate
        ind1.setMate(ind2);
        }
        }
}


// at time point 231
231 late() {
    // Extract all genomes from individuals in p1
    genomes_p1 = p1.genomes;

    // Calculate mean heterozygosity across the population
    heterozygosity_p1 = calcHeterozygosity(genomes_p1);

    // Print the result
    cat("Mean heterozygosity p1= " + heterozygosity_p1 + "\n");

    // Print heterozygosity for each individual
    for (ind in p1.individuals) {
        indHet = calcHeterozygosity(ind.genomes);
        cat("Individual " + ind.id + " heterozygosity = " + indHet + "p1" + "\n");
    }
}

//231 late() {
    // Extract all genomes from individuals in p2
   // genomes_p2 = p2.genomes;

    // Calculate mean heterozygosity across the population
    //heterozygosity_p2 = calcHeterozygosity(genomes_p2);

    // Print the result
    //cat("Mean heterozygosity p2= " + heterozygosity_p2 + "\n");

    // Print heterozygosity for each individual
    //for (ind in p2.individuals) {
       // indHet = calcHeterozygosity(ind.genomes);
        //cat("Individual " + ind.id + " heterozygosity = " + indHet + "p2" + "\n");
        
    //}
//}
//Here a command to create a file is missing...

231 late() {
    // Open CSV file in append mode ("a"), set the path such that file will be safed at the right place
    file = file("/Users/benutzerin/Documents/GitHub/2502_emma_bsc/Outputs/heterozygosity_output.csv", "a"); 
	

    // Write header (only if file is empty)
    if (file.size == 0) {
        writeFile("/Users/benutzerin/Documents/GitHub/2502_emma_bsc/Outputs/heterozygosity_output.csv", "Generation,IndividualID,Population,IndividualHeterozygosity,MeanHeterozygosity_p1,MeanHeterozygosity_p2");
    }

    // Extract all genomes from individuals in p1 and p2
    genomes_p1 = p1.genomes;
    genomes_p2 = p2.genomes;

    // Calculate mean heterozygosity
    heterozygosity_p1 = calcHeterozygosity(genomes_p1);
    heterozygosity_p2 = calcHeterozygosity(genomes_p2);

    // Write individual heterozygosity for p1
    for (ind in p1.individuals) {
        indHet = calcHeterozygosity(ind.genomes);
        writefile(paste(231, ind.id, "p1", indHet, heterozygosity_p1, heterozygosity_p2, sep=","));
    }

    // Write individual heterozygosity for p2
    for (ind in p2.individuals) {
        indHet = calcHeterozygosity(ind.genomes);
        writefile(paste(231, ind.id, "p2", indHet, heterozygosity_p1, heterozygosity_p2, sep=","));
    }

    // Close the file
    file.close();
    
    cat("Heterozygosity data saved to heterozygosity_output.csv\n");
}

//In the last section i have to change something -> Files are not created... :(
