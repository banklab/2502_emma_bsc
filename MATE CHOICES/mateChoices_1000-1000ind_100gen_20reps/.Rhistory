})
rel_matrix_nrr <- sapply(rep_data_nrr, function(df) df$relatedness)
rel_mean_nrr <- rowMeans(rel_matrix_nrr)
het_matrix_nrr <- sapply(rep_data_nrr, function(df) df$heterozygosity)
het_mean_nrr <- rowMeans(het_matrix_nrr)
#And now again all this for the data of the model which has random mating (r)
files_r <- list.files(pattern = "_heterozygosity_r_")
length(files_r)
rep_data_r <- lapply(files_r, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
}) #lapply: apply a function over a list
rel_matrix_r <- sapply(rep_data_r, function(df) df$relatedness)
rel_mean_r <- rowMeans(rel_matrix_r)
het_matrix_r <- sapply(rep_data_r, function(df) df$heterozygosity)
het_mean_r <- rowMeans(het_matrix_r)
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-16ind_100gen")
setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-1000ind_100gen")
par(mfrow = c(1, 2)) #To have 2 plots shown at once
par(mfrow = c(1, 2), oma = c(2, 0, 1, 0))  # oma = outer margin area (bottom, left, top, right), leaves space for a title and some space at the bottom to add a legend outside of the plots.
par(mgp = c(1.8, 0.7, 0)) #This is to decrease the distance of the axis labels to the axis.
par(cex.lab = 0.8, cex.axis = 0.7, cex.main = 1) #this helps me rescaling the size of the labels
# Combine both matrices into one big matrix to find global max and min
max_rel <- max(rel_matrix_nrnr, rel_matrix_nrr, rel_matrix_r)
min_rel <- min(rel_matrix_nrnr, rel_matrix_nrr, rel_matrix_r)
# Model nrnr: light blue points
#Here i dont have to transpose the data, since each column is a separate data series
matplot(generations, rel_matrix_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05),
xlab = "Generation", ylab = "Relatedness",
ylim = c(min_rel, max_rel))
# Model nrr: light green points
matpoints(generations, rel_matrix_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #adding points to the existing plot from above
# Model r: light purple points
matpoints(generations, rel_matrix_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #again
# === adding Mean relatedness lines to the plot ===
lines(generations, rel_mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines(generations, rel_mean_nrr, col = "#894B33FF", lwd = 2)
lines(generations, rel_mean_r, col = "tan1", lwd = 2)
#And now the exactly same but for the heterozygosity values
# Combine both matrices into one big matrix to find global max and min
max_het <- max(het_matrix_nrnr, het_matrix_nrr, het_matrix_r)
min_het <- min(het_matrix_nrnr, het_matrix_nrr, het_matrix_r)
# Model nrnr: light blue points
matplot(generations, het_matrix_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05),
xlab = "Generation", ylab = "Heterozygosity",
ylim = c(min_het, max_het))
# Model nrr: light green points
matpoints(generations, het_matrix_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #add points
# Model r: light purple points
matpoints(generations, het_matrix_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #add points
# === adding Mean relatedness lines to the plot ===
lines(generations, het_mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines(generations, het_mean_nrr, col = "#894B33FF", lwd = 2)
lines(generations, het_mean_r, col = "tan1", lwd = 2)
mtext("Relatedness and Heterozygosity Over Time", side = 3, line = -2, outer = TRUE, cex = 1.2) #creates a shared title
par(xpd = NA) #Allows drawing outside of the plot - this is for the legend
legend("bottom", inset = c(0, -0.6), horiz = FALSE,
legend = c("not-random not-related", "not-random related", "random"),
col = c("#54BFB7FF", "#894B33FF", "tan1"),
lwd = 2, bty = "n", cex = 0.6)
#inset: Pushes it down below the plot
setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_1000-1000ind_100gen")
#First I start with the data of the non-random selecting for non-relatedness (nrnr) model
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-16ind_100gen")
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-1000ind_100gen")
setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_1000-1000ind_100gen")
rm(list=ls(all=TRUE)) #clear R environment
files_nrnr <- list.files(pattern = "_heterozygosity_nrnr_") #list all files with this pattern in the name
length(files_nrnr) #check if it got all the files
#This will create a list of data frames, where every element is a replicate. Each replicate will have the column: Generation, Relatedness and heterozygosity.
rep_data_nrnr <- lapply(files_nrnr, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
})
#lapply is a command which applies a function to all the elements in a vector - So here it names the columns of every file, stored in files_nrnr
# Assume all replicates have the same generations - define the generations for later plot them
generations <- rep_data_nrnr[[1]]$generation
# Extract relatedness into a new matrix: each column = one replicate
rel_matrix_nrnr <- sapply(rep_data_nrnr, function(df) df$relatedness)
#Specifically this tells R: Go through every element "df" in the list rep_data_nrnr, and extract the relatedness column.
# Compute mean relatedness per generation
rel_mean_nrnr <- rowMeans(rel_matrix_nrnr)
#Now do the same for heterozygosity
het_matrix_nrnr <- sapply(rep_data_nrnr, function(df) df$heterozygosity) #create a new matrix for all heterozygosity values
het_mean_nrnr <- rowMeans(het_matrix_nrnr)
#And now again all this for the data of the model which has non-random mating selecting for relatedness (nrr)
files_nrr <- list.files(pattern = "_heterozygosity_nrr_")
length(files_nrr)
rep_data_nrr <- lapply(files_nrr, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
})
rel_matrix_nrr <- sapply(rep_data_nrr, function(df) df$relatedness)
rel_mean_nrr <- rowMeans(rel_matrix_nrr)
het_matrix_nrr <- sapply(rep_data_nrr, function(df) df$heterozygosity)
het_mean_nrr <- rowMeans(het_matrix_nrr)
#And now again all this for the data of the model which has random mating (r)
files_r <- list.files(pattern = "_heterozygosity_r_")
length(files_r)
rep_data_r <- lapply(files_r, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
}) #lapply: apply a function over a list
rel_matrix_r <- sapply(rep_data_r, function(df) df$relatedness)
rel_mean_r <- rowMeans(rel_matrix_r)
het_matrix_r <- sapply(rep_data_r, function(df) df$heterozygosity)
het_mean_r <- rowMeans(het_matrix_r)
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-16ind_100gen")
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-1000ind_100gen")
setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_1000-1000ind_100gen")
par(mfrow = c(1, 2)) #To have 2 plots shown at once
par(mfrow = c(1, 2), oma = c(2, 0, 1, 0))  # oma = outer margin area (bottom, left, top, right), leaves space for a title and some space at the bottom to add a legend outside of the plots.
par(mgp = c(1.8, 0.7, 0)) #This is to decrease the distance of the axis labels to the axis.
par(cex.lab = 0.8, cex.axis = 0.7, cex.main = 1) #this helps me rescaling the size of the labels
# Combine both matrices into one big matrix to find global max and min
max_rel <- max(rel_matrix_nrnr, rel_matrix_nrr, rel_matrix_r)
min_rel <- min(rel_matrix_nrnr, rel_matrix_nrr, rel_matrix_r)
# Model nrnr: light blue points
#Here i dont have to transpose the data, since each column is a separate data series
matplot(generations, rel_matrix_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05),
xlab = "Generation", ylab = "Relatedness",
ylim = c(min_rel, max_rel))
# Model nrr: light green points
matpoints(generations, rel_matrix_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #adding points to the existing plot from above
# Model r: light purple points
matpoints(generations, rel_matrix_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #again
# === adding Mean relatedness lines to the plot ===
lines(generations, rel_mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines(generations, rel_mean_nrr, col = "#894B33FF", lwd = 2)
lines(generations, rel_mean_r, col = "tan1", lwd = 2)
#And now the exactly same but for the heterozygosity values
# Combine both matrices into one big matrix to find global max and min
max_het <- max(het_matrix_nrnr, het_matrix_nrr, het_matrix_r)
min_het <- min(het_matrix_nrnr, het_matrix_nrr, het_matrix_r)
# Model nrnr: light blue points
matplot(generations, het_matrix_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05),
xlab = "Generation", ylab = "Heterozygosity",
ylim = c(min_het, max_het))
# Model nrr: light green points
matpoints(generations, het_matrix_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #add points
# Model r: light purple points
matpoints(generations, het_matrix_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #add points
# === adding Mean relatedness lines to the plot ===
lines(generations, het_mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines(generations, het_mean_nrr, col = "#894B33FF", lwd = 2)
lines(generations, het_mean_r, col = "tan1", lwd = 2)
mtext("Relatedness and Heterozygosity Over Time", side = 3, line = -2, outer = TRUE, cex = 1.2) #creates a shared title
par(xpd = NA) #Allows drawing outside of the plot - this is for the legend
legend("bottom", inset = c(0, -0.6), horiz = FALSE,
legend = c("not-random not-related", "not-random related", "random"),
col = c("#54BFB7FF", "#894B33FF", "tan1"),
lwd = 2, bty = "n", cex = 0.6)
#inset: Pushes it down below the plot
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 500 - n_distinct(FemaleIndex),
missingMales    = 500 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_nrnr <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_nrnr, max_nrnr),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("topleft",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_nrnr <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_nrnr, max_nrnr),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_r <- list.files(pattern = "mateChoices_r_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_r, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 500 - n_distinct(FemaleIndex),
missingMales    = 500 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_r <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_r, max_r),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("bottomleft",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_r <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_r, max_r),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("bottomleft",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
#take care - either make 8 or 500 here, depending if we have 16 or 1000 individuals!!
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_nrnr <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_nrnr, max_nrnr),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_r <- list.files(pattern = "mateChoices_r_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_r, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_r <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_r, max_r),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("bottomleft",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_1000-1000ind_100gen_20reps")
#setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_1000-1000ind_100gen_20reps")
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
#take care - either make 8 or 500 here, depending if we have 16 or 1000 individuals!!
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 500 - n_distinct(FemaleIndex),
missingMales    = 500 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
#setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_1000-1000ind_100gen_20reps")
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_nrnr <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_nrnr, max_nrnr),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
#setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_1000-1000ind_100gen_20reps")
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_r <- list.files(pattern = "mateChoices_r_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_r, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 500 - n_distinct(FemaleIndex),
missingMales    = 500 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
#setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_1000-1000ind_100gen_20reps")
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_r <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_r, max_r),
col = "#54BFB7FF",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("bottomleft",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
#setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_16-16ind_100gen_20reps")
setwd("~/Documents/GitHub/2502_emma_bsc/MATE CHOICES/mateChoices_1000-1000ind_100gen_20reps")
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
min_nrnr <- min(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(min_nrnr, max_nrnr),
col = "dodgerblue4",
main = "number of females and males which don't get to mate out of 500")
lines(x_vals, df_means$meanMissingMales, type = "l", col = "tan1")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("dodgerblue4", "tan1"), cex = 0.6)
