}
# Calculate column means (excluding the last two columns: "reps" and "seed")
column_means <- colMeans(results_df_r[, 1:(ncol(results_df_r)-2)], na.rm = TRUE)
# Create a new row with NA for "reps" and "seed" columns
mean_row <- c(column_means, NA, NA)
# Bind the new row to the bottom of results_df_r
results_df_r <- rbind(results_df_r, mean_row)
# Assign row names
rownames(results_df_r)[nrow(results_df_r)] <- "Mean"
# Print the final matrix with the mean row
print(results_df_r)
write.csv(results_df_r, "Results_random.csv", row.names = F) #write a file with my results
# Extract the cycles (generations) from column names - i dont want the last two entries (seed and reps)
#This will be helpful for the plot
cycle_numbers <- as.numeric(colnames(results_df_r)[1:(ncol(results_df_r)-2)])
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values_r <- results_df_r[1:(nrow(results_df_r)-1), 1:(ncol(results_df_r)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values_r <- results_df_r[nrow(results_df_r), 1:(ncol(results_df_r)-2)]
# Create the plot
matplot(
cycle_numbers,  # X-axis: Generations
t(heterozygosity_values_r),  # Transpose to align data correctly
type = "p",  # "p" for points
pch = 16,  # Use small dots for points
col = rgb(0.4, 0.6, 1, 0.2),  # Blue with transparency --> rgb is kind of nice, (red, green, blue, alpha)
xlab = "Generation (Cycle)",
ylab = "Heterozygosity",
main = "Heterozygosity Across Generations - random-mating",
cex.main = 0.8  # Makes title smaller
)
# Add the mean line
lines(cycle_numbers, mean_values_r, col = "orange", lwd = 2)  # Red solid line
#setwd("~/Documents/GitHub/2502_emma_bsc/Outputs/") #setting the working directory
getwd()  # Prints the current working directory
## all SLiM output files which shiw nonrandom mating with mate choice for least relatedness
slim_out_files <- list.files(pattern = "_nonrandom_related_")
length(slim_out_files)
#install.packages("hierfstat")
library("hierfstat")
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100491, by = 10) #this will help me create the columns i need in my matrix
#row_names <- paste(row_numbers, "reps", "seed", sep = ";")
results_df_nrr <- matrix(NA ,nrow = length(slim_out_files), ncol = (length(row_numbers) + 2))
colnames(results_df_nrr) <- c(row_numbers,"reps","seed")
length(c(row_numbers,"reps","seed"))
dim(results_df_nrr)
for(i in 1:length(slim_out_files)){
single_file <- slim_out_files[i] ## this is the name of a single SLiM result file
get_the_reps <- as.numeric(gsub(".*_reps_([0-9]+)_.*", "\\1", single_file))  ## use gsub() to get the value of 'reps' that we saved in the name of the results file
get_the_seed <- as.numeric(gsub(".*_seed =|\\.csv","",single_file)) ## and for the seed....
results_df_nrr[i,"reps"] <- get_the_reps ## record the value of 'r' for this particular results file
#.*_reps_ → Matches everything before _reps_
#([0-9]+) → Captures one or more digits (the reps number)
#_.* → Matches everything after the number (so it gets removed)
#"\\1" → Extracts only the number inside ().
results_df_nrr[i,"seed"] <- get_the_seed ## record the seed for this particular results file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(df$cycle, colnames(results_df_nrr))
# Assign heterozygosity values to the correct positions in results_df_nrr
results_df_nrr[i, matched_indices] <- df$Heterozygosity
}
# Calculate column means (excluding the last two columns: "reps" and "seed")
column_means <- colMeans(results_df_nrr[, 1:(ncol(results_df_nrr)-2)], na.rm = TRUE)
# Create a new row with NA for "reps" and "seed" columns
mean_row <- c(column_means, NA, NA)
# Bind the new row to the bottom of results_df_nrr
results_df_nrr <- rbind(results_df_nrr, mean_row)
# Assign row names
rownames(results_df_nrr)[nrow(results_df_nrr)] <- "Mean"
# Print the final matrix with the mean row
print(results_df_nrr)
write.csv(results_df_nrr, "Results_nonrandom_related.csv", row.names = F) #write a file with my results
# Extract the cycles (generations) from column names - i dont want the last two entries (seed and reps)
#This will be helpful for the plot
cycle_numbers <- as.numeric(colnames(results_df_nrr)[1:(ncol(results_df_nrr)-2)])
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values_nrr <- results_df_nrr[1:(nrow(results_df_nrr)-1), 1:(ncol(results_df_nrr)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values_nrr <- results_df_nrr[nrow(results_df_nrr), 1:(ncol(results_df_nrr)-2)]
# Create the plot
matplot(
cycle_numbers,  # X-axis: Generations
t(heterozygosity_values_nrr),  # Transpose to align data correctly
type = "p",  # "p" for points
pch = 16,  # Use small dots for points
col = rgb(0.4, 0.6, 1, 0.2),  # Blue with transparency --> rgb is kind of nice, (red, green, blue, alpha)
xlab = "Generation (Cycle)",
ylab = "Heterozygosity",
main = "Heterozygosity Across Generations - nonrandom-mating selecting for relatedness",
cex.main = 0.8  # Makes title smaller
)
# Add the mean line
lines(cycle_numbers, mean_values_nrr, col = "orange", lwd = 2)  # Red solid line
# Create the plot
matplot(
cycle_numbers,  # X-axis: Generations
t(heterozygosity_values_r),  # Transpose to align data correctly
type = "p",  # "p" for points
pch = 16,  # Use small dots for points
col = rgb(0.4, 0.6, 1, 0.2),  # light Blue with transparency --> rgb is kind of nice, (red, green, blue, alpha)
xlab = "Generation (Cycle)",
ylab = "Heterozygosity",
main = "Heterozygosity Across Generations",
cex.main = 0.8  # Makes title smaller
)
# Add the mean line
lines(cycle_numbers, mean_values_r, col = "blue", lwd = 2)  # Red solid line
# Now add the other points and lines
# Add non-random selecting for relatedness
matpoints(cycle_numbers, t(heterozygosity_values_nrr), pch = 16, col = rgb(1, 0.5, 0.5, 0.2))
lines(cycle_numbers, mean_values_nrr, col = "red", lwd = 2)
# add non-rendom selecting for not related
matpoints(cycle_numbers, t(heterozygosity_values_nrnr), pch = 16, col = rgb(0.4, 1, 0.4, 0.2))
#setwd("~/Documents/GitHub/2502_emma_bsc/Outputs/") #setting the working directory
getwd()  # Prints the current working directory
## all SLiM output files which shiw nonrandom mating with mate choice for least relatedness
slim_out_files <- list.files(pattern = "_nonrandom_notrelated_")
length(slim_out_files)
#install.packages("hierfstat")
library("hierfstat")
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100491, by = 10)
#row_names <- paste(row_numbers, "reps", "seed", sep = ";")
results_df_nrnr <- matrix(NA ,nrow = length(slim_out_files), ncol = (length(row_numbers) + 2))
colnames(results_df_nrnr) <- c(row_numbers,"reps","seed")
length(c(row_numbers,"reps","seed"))
dim(results_df_nrnr)
for(i in 1:length(slim_out_files)){
single_file <- slim_out_files[i] ## this is the name of a single SLiM result file
get_the_reps <- as.numeric(gsub(".*_reps_([0-9]+)_.*", "\\1", single_file))  ## use gsub() to get the value of 'reps' that we saved in the name of the results file
get_the_seed <- as.numeric(gsub(".*_seed =|\\.csv","",single_file)) ## and for the seed....
results_df_nrnr[i,"reps"] <- get_the_reps ## record the value of 'r' for this particular results file
#.*_reps_ → Matches everything before _reps_
#([0-9]+) → Captures one or more digits (the reps number)
#_.* → Matches everything after the number (so it gets removed)
#"\\1" → Extracts only the number inside ().
results_df_nrnr[i,"seed"] <- get_the_seed ## record the seed for this particular results file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(as.character(df$cycle), colnames(results_df_nrnr))
# Assign heterozygosity values to the correct positions in results_df_nrnr
results_df_nrnr[i, matched_indices] <- df$Heterozygosity
}
# Calculate column means (excluding the last two columns: "reps" and "seed")
column_means <- colMeans(results_df_nrnr[, 1:(ncol(results_df_nrnr)-2)], na.rm = TRUE)
# Create a new row with NA for "reps" and "seed" columns
mean_row <- c(column_means, NA, NA)
# Bind the new row to the bottom of results_df_nrnr
results_df_nrnr <- rbind(results_df_nrnr, mean_row)
# Assign row names
rownames(results_df_nrnr)[nrow(results_df_nrnr)] <- "Mean"
# Print the final matrix with the mean row
print(results_df_nrnr)
write.csv(results_df_nrnr, "Results_nonrandom_notrelated.csv", row.names = F) #write a file with my results
# Extract the cycles (generations) from column names - i dont want the last two entries (seed and reps)
#This will be helpful for the plot
cycle_numbers <- as.numeric(colnames(results_df_nrnr)[1:(ncol(results_df_nrnr)-2)])
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values_nrnr <- results_df_nrnr[1:(nrow(results_df_nrnr)-1), 1:(ncol(results_df_nrnr)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values_nrnr <- results_df_nrnr[nrow(results_df_nrnr), 1:(ncol(results_df_nrnr)-2)]
# Create the plot
matplot(
cycle_numbers,  # X-axis: Generations
t(heterozygosity_values_nrnr),  # Transpose to align data correctly
type = "p",  # "p" for points
pch = 16,  # Use small dots for points
col = rgb(0.4, 0.6, 1, 0.2),  # Blue with transparency --> rgb is kind of nice, (red, green, blue, alpha)
xlab = "Generation (Cycle)",
ylab = "Heterozygosity",
main = "Heterozygosity Across Generations - nonrandom-mating selecting for nonrelatedness",
cex.main = 0.8  # Makes title smaller
)
# Add the mean line
lines(cycle_numbers, mean_values_nrnr, col = "orange", lwd = 2)  # Red solid line
# Create the plot
matplot(
cycle_numbers,  # X-axis: Generations
t(heterozygosity_values_r),  # Transpose to align data correctly
type = "p",  # "p" for points
pch = 16,  # Use small dots for points
col = rgb(0.4, 0.6, 1, 0.2),  # light Blue with transparency --> rgb is kind of nice, (red, green, blue, alpha)
xlab = "Generation (Cycle)",
ylab = "Heterozygosity",
main = "Heterozygosity Across Generations",
cex.main = 0.8  # Makes title smaller
)
# Add the mean line
lines(cycle_numbers, mean_values_r, col = "blue", lwd = 2)  # Red solid line
# Now add the other points and lines
# Add non-random selecting for relatedness
matpoints(cycle_numbers, t(heterozygosity_values_nrr), pch = 16, col = rgb(1, 0.5, 0.5, 0.2))
lines(cycle_numbers, mean_values_nrr, col = "red", lwd = 2)
# add non-rendom selecting for not related
matpoints(cycle_numbers, t(heterozygosity_values_nrnr), pch = 16, col = rgb(0.4, 1, 0.4, 0.2))
lines(cycle_numbers, mean_values_nrnr, col = "darkgreen", lwd = 2)
legend("topleft", legend = c("Random mating", "Non-random mating selecting for relatedness", "Non-random mating selecting for non-relatedness"), col = c("blue", "red", "darkgreen"), lwd = 2, bty = "n", cex = 0.6)
# Create the plot
matplot(
cycle_numbers,  # X-axis: Generations
t(heterozygosity_values_r),  # Transpose to align data correctly
type = "p",  # "p" for points
pch = 16,  # Use small dots for points
col = rgb(0.4, 0.6, 1, 0.2),  # light Blue with transparency --> rgb is kind of nice, (red, green, blue, alpha)
xlab = "Generation (Cycle)",
ylab = "Heterozygosity",
main = "Heterozygosity Across Generations",
cex.main = 0.8  # Makes title smaller
)
# Add the mean line
lines(cycle_numbers, mean_values_r, col = "blue", lwd = 2)  # Red solid line
# Now add the other points and lines
# Add non-random selecting for relatedness
matpoints(cycle_numbers, t(heterozygosity_values_nrr), pch = 16, col = rgb(1, 0.5, 0.5, 0.2))
lines(cycle_numbers, mean_values_nrr, col = "red", lwd = 2)
# add non-rendom selecting for not related
matpoints(cycle_numbers, t(heterozygosity_values_nrnr), pch = 16, col = rgb(0.4, 1, 0.4, 0.2))
lines(cycle_numbers, mean_values_nrnr, col = "darkgreen", lwd = 2)
legend("topright", legend = c("Random mating", "Non-random mating selecting for relatedness", "Non-random mating selecting for non-relatedness"), col = c("blue", "red", "darkgreen"), lwd = 2, bty = "n", cex = 0.6)
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
reticulate::py_run_string("import pyslim")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
library(slendr)
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
#library(slendr)
ts <- ts_read("model2.trees")
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
# Import tskit
#tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
# Import tskit
tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
# Now you have a Python object 'ts' that you can use in R
print(ts)
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
library(remotes)
py_module_available("tskit")   # should be TRUE
# Import tskit
tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
# Now I have a Python object 'ts' that I can use in R
print(ts)
individuals_to_keep <- as.integer(readLines("model2_individuals.txt"))
#Gather the corresponding node IDs for those individuals.
node_ids <- c()
for (ind_id in individuals_to_keep) {
ind <- ts$individual(ind_id)
# Each individual can have one or more node IDs (e.g., diploids have two nodes).
node_ids <- c(node_ids, ind$nodes)
}
cat("Total individuals:", ts$num_individuals, "\n")
range(individuals_to_keep)
individuals_to_keep <- as.integer(readLines("model2_individuals.txt"))
range(individuals_to_keep)
individuals_to_keep <- as.integer(readLines("model2_individuals.txt"))
range(individuals_to_keep)
lines <- readLines("model2_individuals.txt")
lines
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
# Now convert to integers
individuals_to_keep <- as.integer(lines)
# Check
range(individuals_to_keep)
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
lines
# Now convert to integers
individuals_to_keep <- as.integer(lines)
# Check
range(individuals_to_keep)
individuals_to_keep
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
library(remotes)
py_module_available("tskit")   # should be TRUE
# Import tskit
tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
# Now I have a Python object 'ts' that I can use in R
print(ts)
cat("Total individuals:", ts$num_individuals, "\n")
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
lines
# Now convert to integers
individuals_to_keep <- as.integer(lines)
individuals_to_keep
# Check
#range(individuals_to_keep)
#Gather the corresponding node IDs for those individuals.
node_ids <- c()
for (ind_id in individuals_to_keep) {
ind <- ts$individual(ind_id)
# Each individual can have one or more node IDs (e.g., diploids have two nodes).
node_ids <- c(node_ids, ind$nodes)
}
# Convert node_ids to integer if needed
node_ids <- as.integer(node_ids)
# 4) Use simplify to keep just those nodes (and the relevant ancestral nodes).
ts_filtered <- ts$simplify(node_ids)
# 5) Optionally, dump the filtered tree sequence to a new file.
ts_filtered$dump("model2_filteredinds.trees")
# 6) Inspect your filtered TS in R if desired.
cat("Number of individuals in the filtered TS:", ts_filtered$num_individuals, "\n")
cat("Number of samples in the filtered TS:", ts_filtered$num_samples, "\n")
ts
# Now I have a Python object 'ts' that I can use in R
print(ts)
cat("Total individuals:", ts$num_individuals, "\n")
# 4) Use simplify to keep just those nodes (and the relevant ancestral nodes).
ts_filtered <- ts$simplify(node_ids)
ts_filtered
pyslim <- import("pyslim")
library(ggplot2)
#Read in the data (no header, four columns)
dat <- read.table("data.txt", header = FALSE)
setwd("~/Documents/GitHub/2502_emma_bsc")
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_r.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
# 1) Read in the data (no header, three columns)
dat <- read.table("data.txt", header = FALSE)
# 1) Read in the data (no header, three columns)
dat <- read.table("rel_Fst_het_r.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# 2) Base‐R scatterplot of relatedness vs FST
plot(dat$relatedness, dat$fst,
pch=19, cex=0.6,
xlab="Mean Relatedness",
ylab="Mean FST",
main="Relatedness vs. FST")
# add a linear fit
abline(lm(fst ~ relatedness, data=dat), col="#54BFB7FF", lwd=2)
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr_100.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr_1000.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
