#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
library(slendr)
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
#library(slendr)
ts <- ts_read("model2.trees")
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
# Import tskit
#tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
#conda_install("r-slendr", c("numpy", "tskit"), channel = "conda-forge")  # from conda
#conda_install("r-slendr", "pyslim", pip = TRUE)                          # from pip
#install.packages("remotes")  # if not already installed
library(remotes)
#remotes::install_github("bodkan/slendr", force = TRUE)
#reticulate::py_run_string("import pyslim")
#py_module_available("pyslim")  # should be TRUE
py_module_available("tskit")   # should be TRUE
# Import tskit
tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
# Now you have a Python object 'ts' that you can use in R
print(ts)
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
library(remotes)
py_module_available("tskit")   # should be TRUE
# Import tskit
tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
# Now I have a Python object 'ts' that I can use in R
print(ts)
individuals_to_keep <- as.integer(readLines("model2_individuals.txt"))
#Gather the corresponding node IDs for those individuals.
node_ids <- c()
for (ind_id in individuals_to_keep) {
ind <- ts$individual(ind_id)
# Each individual can have one or more node IDs (e.g., diploids have two nodes).
node_ids <- c(node_ids, ind$nodes)
}
cat("Total individuals:", ts$num_individuals, "\n")
range(individuals_to_keep)
individuals_to_keep <- as.integer(readLines("model2_individuals.txt"))
range(individuals_to_keep)
individuals_to_keep <- as.integer(readLines("model2_individuals.txt"))
range(individuals_to_keep)
lines <- readLines("model2_individuals.txt")
lines
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
# Now convert to integers
individuals_to_keep <- as.integer(lines)
# Check
range(individuals_to_keep)
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
lines
# Now convert to integers
individuals_to_keep <- as.integer(lines)
# Check
range(individuals_to_keep)
individuals_to_keep
setwd("~/Documents/GitHub/2502_emma_bsc")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
library(remotes)
py_module_available("tskit")   # should be TRUE
# Import tskit
tskit <- import("tskit")
# Load the .trees file
ts <- tskit$load("model2.trees")
# Now I have a Python object 'ts' that I can use in R
print(ts)
cat("Total individuals:", ts$num_individuals, "\n")
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
lines
# Now convert to integers
individuals_to_keep <- as.integer(lines)
individuals_to_keep
# Check
#range(individuals_to_keep)
#Gather the corresponding node IDs for those individuals.
node_ids <- c()
for (ind_id in individuals_to_keep) {
ind <- ts$individual(ind_id)
# Each individual can have one or more node IDs (e.g., diploids have two nodes).
node_ids <- c(node_ids, ind$nodes)
}
# Convert node_ids to integer if needed
node_ids <- as.integer(node_ids)
# 4) Use simplify to keep just those nodes (and the relevant ancestral nodes).
ts_filtered <- ts$simplify(node_ids)
# 5) Optionally, dump the filtered tree sequence to a new file.
ts_filtered$dump("model2_filteredinds.trees")
# 6) Inspect your filtered TS in R if desired.
cat("Number of individuals in the filtered TS:", ts_filtered$num_individuals, "\n")
cat("Number of samples in the filtered TS:", ts_filtered$num_samples, "\n")
ts
# Now I have a Python object 'ts' that I can use in R
print(ts)
cat("Total individuals:", ts$num_individuals, "\n")
# 4) Use simplify to keep just those nodes (and the relevant ancestral nodes).
ts_filtered <- ts$simplify(node_ids)
ts_filtered
pyslim <- import("pyslim")
library(ggplot2)
#Read in the data (no header, four columns)
dat <- read.table("data.txt", header = FALSE)
setwd("~/Documents/GitHub/2502_emma_bsc")
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_r.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
# 1) Read in the data (no header, three columns)
dat <- read.table("data.txt", header = FALSE)
# 1) Read in the data (no header, three columns)
dat <- read.table("rel_Fst_het_r.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# 2) Base‐R scatterplot of relatedness vs FST
plot(dat$relatedness, dat$fst,
pch=19, cex=0.6,
xlab="Mean Relatedness",
ylab="Mean FST",
main="Relatedness vs. FST")
# add a linear fit
abline(lm(fst ~ relatedness, data=dat), col="#54BFB7FF", lwd=2)
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr_100.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
#Read in the data (no header, four columns)
dat <- read.table("rel_Fst_het_nrnr_1000.txt", header = FALSE)
colnames(dat) <- c("generation", "relatedness", "fst", "heterozygosity")
# install.packages("ggplot2")  # if you haven’t already
library(ggplot2)
ggplot(dat, aes(x=relatedness, y=fst)) +
geom_point(alpha=0.5) +
geom_smooth(method="lm", col="#54BFB7FF", se=TRUE) + #adds the shaded band representing the confidence interval (by default 95%) around the smoothing line
labs(
title = "Relatedness vs FST",
x = "Mean Relatedness",
y = "Mean FST"
) +
theme_minimal()
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 100
repetition <- seq(1:100)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2_onlySLiM.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 100
repetition <- seq(1:100)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2_onlySLiM.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
relatedness_start   = dat[1, 2],
heterozygosity_end  = dat[2, 3]
)
})
# 4) bind into one data.frame
df <- do.call(rbind, res_list)
# 5) quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_end,
xlab = "Starting relatedness",
ylab = "End heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# (optional) add a linear fit
abline(lm(heterozygosity_end ~ relatedness_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$relatedness_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
library(ggplot2)
ggplot(df, aes(x = relatedness_start, y = heterozygosity_end)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(
x    = "Starting relatedness",
y    = "End heterozygosity",
title= "Relatedness vs Heterozygosity"
) +
theme_minimal()
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
heterozygosity_start   = dat[1, 3],
heterozygosity_end  = dat[2, 3]
)
})
# 4) bind into one data.frame
df <- do.call(rbind, res_list)
# 5) quick base‐R scatterplot
plot(
df$heterozygosity_start,
df$heterozygosity_end,
xlab = "Starting heterozygosity",
ylab = "End heterozygosity",
main = "starting Heterozygosity vs end heterozygosity",
pch = 19
)
# (optional) add a linear fit
abline(lm(heterozygosity_end ~ heterozygosity_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$heterozygosity_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 100
repetition <- seq(1:100)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2_onlySLiM_random.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
relatedness_start   = dat[1, 2],
heterozygosity_end  = dat[2, 3]
)
})
# 4) bind into one data.frame
df <- do.call(rbind, res_list)
# 5) quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_end,
xlab = "Starting relatedness",
ylab = "End heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# (optional) add a linear fit
abline(lm(heterozygosity_end ~ relatedness_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$relatedness_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
library(ggplot2)
ggplot(df, aes(x = relatedness_start, y = heterozygosity_end)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(
x    = "Starting relatedness",
y    = "End heterozygosity",
title= "Relatedness vs Heterozygosity"
) +
theme_minimal()
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
heterozygosity_start   = dat[1, 3],
heterozygosity_end  = dat[2, 3]
)
})
# 4) bind into one data.frame
df <- do.call(rbind, res_list)
# 5) quick base‐R scatterplot
plot(
df$heterozygosity_start,
df$heterozygosity_end,
xlab = "Starting heterozygosity",
ylab = "End heterozygosity",
main = "starting Heterozygosity vs end heterozygosity",
pch = 19
)
# (optional) add a linear fit
abline(lm(heterozygosity_end ~ heterozygosity_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$heterozygosity_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
relatedness_start   = dat[1, 2],
heterozygosity_start  = dat[2, 2]
)
})
# 4) bind into one data.frame
df <- do.call(rbind, res_list)
# 5) quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_start,
xlab = "Starting relatedness",
ylab = "starting heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# (optional) add a linear fit
abline(lm(heterozygosity_end ~ relatedness_start, data = df), col = "#54BFB7FF")
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
relatedness_start   = dat[1, 2],
heterozygosity_start  = dat[2, 2]
)
})
# 4) bind into one data.frame
df <- do.call(rbind, res_list)
# 5) quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_start,
xlab = "Starting relatedness",
ylab = "starting heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# (optional) add a linear fit
abline(lm(heterozygosity_start ~ relatedness_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$relatedness_start,
df$heterozygosity_start,
method = "pearson"
)
print(pearson_res)
