# Read the data. No header in my text file, so header = FALSE
df <- read.table("mateChoices_nrnr.txt", header = FALSE)
# Assign meaningful column names
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
#install.packages("dplyr")
library(dplyr)
# Summarize by generation
#%>%: take the output of whatever’s on the left side and pass it automatically as the first argument to the function on the right side.
# --> in the following code: the df is forwarded into arrange() as its first argument. Then the output of arrange() is forwarded into head()
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),   # how many female indexes appear
distinctMales   = n_distinct(MaleIndex),     # how many male indexes appear
missingFemales  = 8 - n_distinct(FemaleIndex), # how many of the 8 never appear
missingMales    = 8 - n_distinct(MaleIndex)
)
# Look at the result
df_counts
max <- max (df_counts$missingFemales, df_counts$missingMales)
x_vals <- df_counts$Generation
y_vals <- df_counts$missingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max),
col = "lightseagreen"
)
lines(x_vals, df_counts$missingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
# Read the data. No header in my text file, so header = FALSE
df <- read.table("mateChoices_nrr.txt", header = FALSE)
# Assign meaningful column names
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
#install.packages("dplyr")
library(dplyr)
# Summarize by generation
#%>%: take the output of whatever’s on the left side and pass it automatically as the first argument to the function on the right side.
# --> in the following code: the df is forwarded into arrange() as its first argument. Then the output of arrange() is forwarded into head()
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),   # how many female indexes appear
distinctMales   = n_distinct(MaleIndex),     # how many male indexes appear
missingFemales  = 8 - n_distinct(FemaleIndex), # how many of the 8 never appear
missingMales    = 8 - n_distinct(MaleIndex)
)
# Look at the result
df_counts
max <- max (df_counts$missingFemales, df_counts$missingMales)
x_vals <- df_counts$Generation
y_vals <- df_counts$missingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max),
col = "lightseagreen"
)
lines(x_vals, df_counts$missingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
# Read the data. No header in my text file, so header = FALSE
df <- read.table("mateChoices_nrnr.txt", header = FALSE)
# Assign meaningful column names
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
#install.packages("dplyr")
library(dplyr)
# Summarize by generation
#%>%: take the output of whatever’s on the left side and pass it automatically as the first argument to the function on the right side.
# --> in the following code: the df is forwarded into arrange() as its first argument. Then the output of arrange() is forwarded into head()
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),   # how many female indexes appear
distinctMales   = n_distinct(MaleIndex),     # how many male indexes appear
missingFemales  = 8 - n_distinct(FemaleIndex), # how many of the 8 never appear
missingMales    = 8 - n_distinct(MaleIndex)
)
# Look at the result
df_counts
max <- max (df_counts$missingFemales, df_counts$missingMales)
x_vals <- df_counts$Generation
y_vals <- df_counts$missingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max),
col = "lightseagreen"
)
lines(x_vals, df_counts$missingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
# Read the data. No header in my text file, so header = FALSE
df <- read.table("mateChoices_r.txt", header = FALSE)
# Assign meaningful column names
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
#install.packages("dplyr")
library(dplyr)
# Summarize by generation
#%>%: take the output of whatever’s on the left side and pass it automatically as the first argument to the function on the right side.
# --> in the following code: the df is forwarded into arrange() as its first argument. Then the output of arrange() is forwarded into head()
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),   # how many female indexes appear
distinctMales   = n_distinct(MaleIndex),     # how many male indexes appear
missingFemales  = 8 - n_distinct(FemaleIndex), # how many of the 8 never appear
missingMales    = 8 - n_distinct(MaleIndex)
)
# Look at the result
df_counts
max <- max (df_counts$missingFemales, df_counts$missingMales)
x_vals <- df_counts$Generation
y_vals <- df_counts$missingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max),
col = "lightseagreen"
)
lines(x_vals, df_counts$missingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 20
repetition <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " print_matings_tryout_nrnr.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 20
repetition <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " print_matings_tryout_r.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
df_all
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
df_means
max_nrnr <- max(df_means$missingFemales, df_means$missingMales)
x_vals <- df_means$Generation
y_vals <- df_means$missingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max),
col = "lightseagreen"
)
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max),
col = "lightseagreen"
)
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max_nrnr),
col = "lightseagreen"
)
lines(x_vals, df_means$meanMissingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_r <- list.files(pattern = "mateChoices_r_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_r, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
df_means
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max_r),
col = "lightseagreen"
)
lines(x_vals, df_means$meanMissingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 20
repetition <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " print_matings_tryout_nrnr.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 20
repetition <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " print_matings_tryout_r.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
df_means
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_nrnr <- list.files(pattern = "mateChoices_nrnr_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_nrnr, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 500 - n_distinct(FemaleIndex),
missingMales    = 500 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
df_means
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max_nrnr),
col = "lightseagreen"
)
lines(x_vals, df_means$meanMissingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
max_nrnr <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max_nrnr),
col = "lightseagreen"
)
lines(x_vals, df_means$meanMissingMales, type = "l", col = "pink")
legend("bottomright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_r <- list.files(pattern = "mateChoices_r_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_r, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 8 - n_distinct(FemaleIndex),
missingMales    = 8 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
library(dplyr)
# Vector of file names (adjust as needed for your naming/paths)
files_r <- list.files(pattern = "mateChoices_r_")
# For each file, read it in, compute df_counts, and return it
all_reps <- lapply(files_r, function(f) {
# 1. Read the data
df <- read.table(f, header = FALSE)
colnames(df) <- c("Generation", "FemaleIndex", "MaleIndex")
# 2. Summarize by generation
df_counts <- df %>%
group_by(Generation) %>%
summarise(
distinctFemales = n_distinct(FemaleIndex),
distinctMales   = n_distinct(MaleIndex),
missingFemales  = 500 - n_distinct(FemaleIndex),
missingMales    = 500 - n_distinct(MaleIndex),
#.groups = "drop"
)
# Return the summarized table
df_counts
})
# Bind all replicate summaries into one data frame, with a new column "rep" indicating which replicate
df_all <- bind_rows(all_reps, .id = "rep")
# Now df_all has columns: rep, Generation, distinctFemales, distinctMales, missingFemales, missingMales
#I now want to group the data by generations, to average the data across all replicates for each generation.
df_means <- df_all %>%
group_by(Generation) %>%
summarise(
meanMissingFemales = mean(missingFemales),
meanMissingMales   = mean(missingMales),
.groups = "drop" #remove the grouping again
)
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max_r),
col = "lightseagreen"
)
lines(x_vals, df_means$meanMissingMales, type = "l", col = "pink")
legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
max_r <- max(df_means$meanMissingFemales, df_means$meanMissingMales)
x_vals <- df_means$Generation
y_vals <- df_means$meanMissingFemales
matplot(
x = x_vals,
y = y_vals,
type = "l",           # "b" means points connected by lines
xlab = "Generation",
ylab = "Number Missing",
ylim = c(0, max_r),
col = "lightseagreen"
)
lines(x_vals, df_means$meanMissingMales, type = "l", col = "pink")
legend("bottomright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("lightseagreen", "pink"), cex = 0.6)
df_means
