repetition <- 1:1000 #This tells SliM how many repetitions I want (defined constant in SLiM)
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 20
repetition <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2.1.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 20
repetition <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2.1.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 50
repetition <- 1:50
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2.1.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 50
repetition <- 1:50
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2.1.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
rm(list=ls(all=TRUE)) #clear R environment
options(scipen = 999) #scientific notation penalty, with this R does not use scientific notation for numbers
setwd("~/Documents/GitHub/2502_emma_bsc") #setting the working directory
reps <- 50
repetition <- 1:50
for(r in 1:reps){
slim_code_block <- paste0("slim -d repetition=", r, " model2.1.slim")
#slim_code_block
system(slim_code_block)#call the code block for slim in the terminal via bash, system invokes the OS command specified by command.
}
slim_out_files <- list.files(pattern = "model2.1_reps_")
length(slim_out_files)
#install.packages("hierfstat")
library("hierfstat")
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100139, by = 2)
results_df_nrnr <- matrix(NA ,nrow = length(slim_out_files), ncol = (length(row_numbers) + 2))
colnames(results_df_nrnr) <- c(row_numbers,"reps","seed")
length(c(row_numbers,"reps","seed"))
dim(results_df_nrnr)
for(i in 1:length(slim_out_files)){
single_file <- slim_out_files[i] ## this is the name of a single SLiM result file
get_the_reps <- as.numeric(gsub(".*_reps_([0-9]+)_.*", "\\1", single_file))  ## use gsub() to get the value of 'reps' that we saved in the name of the results file
get_the_seed <- as.numeric(gsub(".*_seed =|\\.csv","",single_file)) ## and for the seed....
results_df_nrnr[i,"reps"] <- get_the_reps ## record the value of 'r' for this particular results file
#.*_reps_ → Matches everything before _reps_
#([0-9]+) → Captures one or more digits (the reps number)
#_.* → Matches everything after the number (so it gets removed)
#"\\1" → Extracts only the number inside ().
results_df_nrnr[i,"seed"] <- get_the_seed ## record the seed for this particular results file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(as.character(df$cycle), colnames(results_df_nrnr))
# Assign heterozygosity values to the correct positions in results_df_nrnr
results_df_nrnr[i, matched_indices] <- df$Heterozygosity
}
single_file
get_the_reps
get_the_seed
results_df_nrnr
slim_out_files <- list.files(pattern = "model2.1_reps_")
length(slim_out_files)
#install.packages("hierfstat")
library("hierfstat")
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100139, by = 1)
results_df <- matrix(NA ,nrow = length(slim_out_files), ncol = (length(row_numbers) + 2))
colnames(results_df) <- c(row_numbers,"reps","seed")
length(c(row_numbers,"reps","seed"))
dim(results_df)
for(i in 1:length(slim_out_files)){
single_file <- slim_out_files[i] ## this is the name of a single SLiM result file
get_the_reps <- as.numeric(gsub(".*_reps_([0-9]+)_.*", "\\1", single_file))  ## use gsub() to get the value of 'reps' that we saved in the name of the results file
get_the_seed <- as.numeric(gsub(".*_seed =|\\.csv","",single_file)) ## and for the seed....
results_df[i,"reps"] <- get_the_reps ## record the value of 'r' for this particular results file
#.*_reps_ → Matches everything before _reps_
#([0-9]+) → Captures one or more digits (the reps number)
#_.* → Matches everything after the number (so it gets removed)
#"\\1" → Extracts only the number inside ().
results_df[i,"seed"] <- get_the_seed ## record the seed for this particular results file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(as.character(df$cycle), colnames(results_df))
# Assign heterozygosity values to the correct positions in results_df_nrnr
results_df[i, matched_indices] <- df$Heterozygosity
}
# Calculate column means (excluding the last two columns: "reps" and "seed")
column_means <- colMeans(results_df_nrnr[, 1:(ncol(results_df)-2)], na.rm = TRUE)
slim_out_files <- list.files(pattern = "model2.1_reps_")
length(slim_out_files)
#install.packages("hierfstat")
library("hierfstat")
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100139, by = 1)
results_df <- matrix(NA ,nrow = length(slim_out_files), ncol = (length(row_numbers) + 2))
colnames(results_df) <- c(row_numbers,"reps","seed")
length(c(row_numbers,"reps","seed"))
dim(results_df)
for(i in 1:length(slim_out_files)){
single_file <- slim_out_files[i] ## this is the name of a single SLiM result file
get_the_reps <- as.numeric(gsub(".*_reps_([0-9]+)_.*", "\\1", single_file))  ## use gsub() to get the value of 'reps' that we saved in the name of the results file
get_the_seed <- as.numeric(gsub(".*_seed =|\\.csv","",single_file)) ## and for the seed....
results_df[i,"reps"] <- get_the_reps ## record the value of 'r' for this particular results file
#.*_reps_ → Matches everything before _reps_
#([0-9]+) → Captures one or more digits (the reps number)
#_.* → Matches everything after the number (so it gets removed)
#"\\1" → Extracts only the number inside ().
results_df[i,"seed"] <- get_the_seed ## record the seed for this particular results file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(as.character(df$cycle), colnames(results_df))
# Assign heterozygosity values to the correct positions in results_df_nrnr
results_df[i, matched_indices] <- df$Heterozygosity
}
# Calculate column means (excluding the last two columns: "reps" and "seed")
column_means <- colMeans(results_df[, 1:(ncol(results_df)-2)], na.rm = TRUE)
# Create a new row with the mean values,  NA for "reps" and "seed" columns
mean_row <- c(column_means, NA, NA)
# Bind the new row to the bottom of results_df_nrnr
results_df <- rbind(results_df, mean_row)
# Assign row names
rownames(results_df)[nrow(results_df)] <- "Mean"
# Print the final matrix with the mean row
print(results_df)
#write.csv(results_df, "Results_nonrandom_notrelated.csv", row.names = F) #write a file with my results
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
heterozygosity_only <- heterozygosity_values[, 1:length(cycle_numbers)]
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of x_values
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, heterozygosity_only, type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.03), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
heterozygosity_only
length(heterozygosity_only)
dim(heterozygosity_only)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.03), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.2), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.2), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(heterozygosity_only, 1, median, na.rm = TRUE)
p25 <- apply(heterozygosity_only, 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(heterozygosity_only, 1, function(x) quantile(x, 0.75, na.rm = TRUE))
lines(x_values, med, col = "tan1", lwd = 2.5, lty = 1)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.2), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(heterozygosity_only, 1, median, na.rm = TRUE)
p25 <- apply(heterozygosity_only, 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(heterozygosity_only, 1, function(x) quantile(x, 0.75, na.rm = TRUE))
lines(x_values, t(med), col = "tan1", lwd = 2.5, lty = 1)
med
length(med)
dim(med)
med <- apply(t(heterozygosity_only), 1, median, na.rm = TRUE)
length(med)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.2), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(t(heterozygosity_only), 1, median, na.rm = TRUE)
p25 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.75, na.rm = TRUE))
lines(x_values, med, col = "tan1", lwd = 2.5, lty = 1)
lines(x_values, p25, col = "tan1", lwd = 1.5, lty = 3)
lines(x_values, p75, col = "tan1", lwd = 1.5, lty = 3)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.2), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(t(heterozygosity_only), 1, median, na.rm = TRUE)
p25 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.75, na.rm = TRUE))
lines(x_values, med, col = "tan1", lwd = 2.5, lty = 1)
lines(x_values, p25, col = "tan1", lwd = 2, lty = 3)
lines(x_values, p75, col = "tan1", lwd = 2, lty = 3)
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly --> I want to cut the columns not the rows, thats why there is this notation with the
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.2), # Model nrnr: light blue points, rgb(red, green, blue, alpha) enables me to modify the colors a bit better, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(t(heterozygosity_only), 1, median, na.rm = TRUE)
p25 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.75, na.rm = TRUE))
lines(x_values, med, col = "tan1", lwd = 2.5, lty = 1)
lines(x_values, p25, col = "#894B33FF", lwd = 2, lty = 3)
lines(x_values, p75, col = "#894B33FF", lwd = 2, lty = 3)
