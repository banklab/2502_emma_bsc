#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts <- tskit$load("model2.trees")
ts <- pyslim$annotate(ts, model_type = "WF", tick = as.integer(100036))
cat("Raw metadata for individual 0:\n")
print(ts$individual(as.integer(80))$metadata)
# Now I have a Python object 'ts' that I can use in R
print(ts)
cat("Total individuals:", ts$num_individuals, "\n")
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
lines
# Now convert to integers
individuals_to_keep <- sort(as.integer(lines))  # Sorting ensures smallest ID comes first
individuals_to_keep
# Check
#range(individuals_to_keep)
for (ind_id in individuals_to_keep[1:5]) {  # just look at a few
cat("Individual:", ind_id, "\n")
nodes_python <- ts$individual(ind_id)$nodes
str(nodes_python)  # How does reticulate show these?
nodes_r <- py_to_r(nodes_python)
str(nodes_r)       # What does it look like after py_to_r()?
}
# Step A: Gather all node objects, explicitly call .tolist() in Python
all_node_lists_py <- lapply(individuals_to_keep, function(ind_id) {
node_obj <- ts$individual(ind_id)$nodes
# Convert the NumPy array (or array-like) to a pure Python list:
node_obj$tolist()
})
# Step B: Now convert *that* entire list-of-lists from Python into R objects
all_node_lists_r <- py_to_r(all_node_lists_py)
# Step C: Flatten everything into one long R vector
node_ids <- unlist(all_node_lists_r)
# Step D: Finally, convert to integer
node_ids <- as.integer(node_ids)
cat("Final node IDs:", node_ids, "\n")
# 4) Simplify the tree sequence while preserving SLiM metadata:
# Note that by setting filter_populations=FALSE, we keep the original population table,
# and by setting keep_input_individuals=TRUE, pyslim preserves individual-level SLiM metadata (e.g., relatedness).
ts_filtered <- ts$simplify(
samples = node_ids,
filter_populations = FALSE,   # Keep original population IDs and table
filter_individuals = TRUE,    # Remove individuals that are not in node_ids
)
# 5) dump the filtered tree sequence to a new file.
#ts_filtered$dump("model2_filteredinds.trees")
# Load necessary libraries
library(reticulate)
json <- import("json")
py_builtins <- import("builtins")  # Import Python built-ins for bytes conversion
# Extract the table collection from the filtered tree sequence.
tables <- ts_filtered$tables
# Access the 'metadata' array of the individuals table.
inds_meta <- tables$individuals$metadata
# Get the number of individuals in the filtered tree sequence.
num_inds <- ts_filtered$num_individuals
# Loop over each individual (Python indexing: 0 to num_inds-1)
for (i in seq(0, num_inds - 1)) {
meta_item <- inds_meta[[i + 1]]
# Check the metadata type
if (inherits(meta_item, "raw")) {
meta_str <- rawToChar(meta_item)
} else if (is.character(meta_item)) {
meta_str <- meta_item
} else {
# If the metadata is not raw or character (e.g. numeric), warn and use an empty JSON object.
warning("Unexpected metadata type: ", class(meta_item),
". Using empty JSON object for individual ", i, ".")
meta_str <- "{}"
}
# Load the metadata JSON into a Python object (a dictionary)
meta_obj <- json$loads(meta_str)
# Update/add the 'sex' field based on the individual's index:
# First 4 individuals (i = 0,1,2,3) -> "F", rest -> "M"
if (i < 4) {
meta_obj$sex <- "F"
} else {
meta_obj$sex <- "M"
}
# Dump the updated Python object back to a JSON string.
new_meta_str <- json$dumps(meta_obj)
# Convert the JSON string to a Python bytes object.
# This will ensure the value is in the expected format.
new_meta_bytes <- py_builtins$bytes(new_meta_str, "utf-8")
# Update the metadata list with the Python bytes object.
inds_meta[[i + 1]] <- new_meta_bytes
}
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts <- tskit$load("model2.trees")
ts <- pyslim$annotate(ts, model_type = "WF", tick = as.integer(100036))
ts
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts <- tskit$load("model2.trees")
ts <- pyslim$annotate(ts, model_type = "WF", tick = as.integer(100036))
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts <- tskit$load("model2.trees")
# **Simplify the tree sequence before annotation**
# Make sure that all sample nodes are attached to an individual by using:
ts_simplified <- ts_raw$simplify(
samples = ts_raw$samples,           # alternatively, provide specific sample nodes if needed
filter_populations = FALSE,         # retain the original population table
filter_individuals = TRUE,          # remove individuals not connected to any sample node
keep_input_individuals = TRUE       # ensure that individual associations are preserved
)
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.trees")
# **Simplify the tree sequence before annotation**
# Make sure that all sample nodes are attached to an individual by using:
ts_simplified <- ts_raw$simplify(
samples = ts_raw$samples,           # alternatively, provide specific sample nodes if needed
filter_populations = FALSE,         # retain the original population table
filter_individuals = TRUE,          # remove individuals not connected to any sample node
keep_input_individuals = TRUE       # ensure that individual associations are preserved
)
setwd("~/Documents/GitHub/2502_emma_bsc")
# Specify which Python environment to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
# Check that pyslim and tskit are available
py_module_available("pyslim")
py_module_available("tskit")
# Import pyslim and tskit
pyslim <- import("pyslim")
tskit   <- import("tskit")
# Load the raw tree sequence produced by SLiM
ts_raw <- tskit$load("model2.trees")
# Read in the individual IDs from your file, sort them
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
individuals_to_keep <- sort(as.integer(lines))
# Gather the sample node IDs from these individuals:
all_node_lists_py <- lapply(individuals_to_keep, function(ind_id) {
# Extract the nodes for each individual and convert to a Python list.
# Here we assume that these individuals have nodes.
node_obj <- ts_raw$individual(ind_id)$nodes
node_obj$tolist()
})
setwd("~/Documents/GitHub/2502_emma_bsc")
# Specify which Python environment to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
use_condaenv("r-slendr", required = TRUE)
py_config()
# Check that pyslim and tskit are available
py_module_available("pyslim")
py_module_available("tskit")
# Import pyslim and tskit
pyslim <- import("pyslim")
tskit   <- import("tskit")
# Load the raw tree sequence produced by SLiM
ts_raw <- tskit$load("model2.trees")
# Read in the individual IDs from your file, sort them
lines <- readLines("model2_individuals.txt")
lines <- lines[lines != ""]
individuals_to_keep <- sort(as.integer(lines))
# Gather the sample node IDs from these individuals:
aall_node_lists_py <- lapply(individuals_to_keep, function(ind_id) {
node_obj <- ts_raw$individual(ind_id)$nodes
# Check if node_obj is already an atomic vector
if (is.atomic(node_obj)) {
# Already an R vector: use it directly
node_obj
} else {
# Still a Python object, so call its tolist() method:
node_obj$tolist()
}
})
all_node_lists_r <- py_to_r(all_node_lists_py)
node_ids <- as.integer(unlist(all_node_lists_r))
cat("Final node IDs:\n")
print(node_ids)
# Simplify the tree sequence using these node IDs.
# This will remove any individuals that are not represented by the provided node_ids.
ts_filtered <- ts_raw$simplify(
samples = node_ids,
filter_populations = FALSE,
filter_individuals = TRUE
)
cat("Number of individuals in the filtered TS:", ts_filtered$num_individuals, "\n")
cat("Number of samples in the filtered TS:", ts_filtered$num_samples, "\n")
# Now annotate the simplified tree sequence.
ts <- pyslim$annotate(ts_filtered, model_type = "WF", tick = as.integer(100036))
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.trees")
# **Simplify the tree sequence before annotation**
# Make sure that all sample nodes are attached to an individual by using:
ts_simplified <- ts_raw$simplify(
samples = ts_raw$samples,           # alternatively, provide specific sample nodes if needed
filter_populations = FALSE,         # retain the original population table
filter_individuals = TRUE,          # remove individuals not connected to any sample node
)
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.trees")
ts <- pyslim$annotate(ts_simplified, model_type = "WF", tick = as.integer(100036))
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.trees")
ts <- pyslim$annotate(ts_raw, model_type = "WF", tick = as.integer(100036))
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.trees")
# Access nodes table from the raw tree sequence
nodes <- ts_raw$tables$nodes
# Retrieve the sample nodes indices
sample_nodes <- ts_raw$samples
# Extract the 'individual' field for each sample node
sample_individual_ids <- nodes$individual[sample_nodes + 1]  # note: R is 1-indexed
# Extract the 'individual' field for each sample node
sample_individual_ids <- nodes$individual[sample_nodes]  # note: R is 1-indexed
# Extract the 'individual' field for each sample node
sample_individual_ids <- nodes$individual(sample_nodes)  # note: R is 1-indexed
# Extract the 'individual' field for each sample node
sample_individual_ids <- nodes$individual[sample_nodes]  # note: R is 1-indexed
# Extract the 'individual' field for each sample node
sample_individual_ids <- nodes$individual[sample_nodes+1]  # note: R is 1-indexed
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.0.trees")
ts <- pyslim$annotate(ts_raw, model_type = "WF", tick = as.integer(100036))
setwd("~/Documents/GitHub/2502_emma_bsc")
#if it doesnt work - run in a different file:
#file.edit("~/.Renviron")
#and then in the file whiiich was opened:
#RETICULATE_PYTHON=/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python
#Specify which python environment I want to use
Sys.setenv(RETICULATE_PYTHON = "/Users/benutzerin/Library/r-miniconda/envs/r-slendr/bin/python")
library(reticulate)
#create a new environment
#conda_create("r-slendr")
use_condaenv("r-slendr", required = TRUE)
py_config()
#these 2 commands are for installing the packages tskit and pyslim into python.
#conda_install("r-slendr", "tskit", channel = "conda-forge")
#conda_install("r-slendr", "pyslim", channel = "conda-forge")
#some other helpful packages:
#conda_install("r-slendr", "gsl", channel = "conda-forge")
#conda_install("r-slendr", "msprime", channel = "conda-forge")
#install.packages("remotes")  # if not already installed
library(remotes)
# Check that pyslim and tskit are available (should return TRUE)
py_module_available("pyslim")
py_module_available("tskit")   # should be TRUE
# Import pyslim (which builds on tskit but preserves SLiM metadata) and tskit
pyslim <- import("pyslim")
tskit <- import("tskit")
#Load the .trees file with tskit, then annotate with pyslim to preserve SLiM metadata like relatedness
#With pylim it is not possible to load the .tree file...
#To use pyslim, i also have to add the informations of my slim model - it is a WF model and ends at tick 100036 - you also have to tell pyslim to treat individuals as seperate sexes!
ts_raw <- tskit$load("model2.trees")
ts <- pyslim$annotate(ts_raw, model_type = "WF", tick = as.integer(100036))
