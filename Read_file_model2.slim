initialize() {

	initializeSLiMOptions(keepPedigrees = T); //Ensables the program to keep track of the ancestry
	initializeMutationRate(1e-7); //define a mutation rate - based on values for the common kingfisher. 
	//here i call my mutations as m0, because of the filtering i did with python. Somehow m0 was used as placeholder for m1. 
	initializeMutationType("m0", 0.5, "f", 0.0); //mutation type m1 is has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g0", m0, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g0, 0, 99999); //g1 has length 10'000 bases
	initializeRecombinationRate(1e-7); // define the recombination rate
	initializeSex("A"); //creates males and females in the population

    initializeTreeSeq(); //this command enables me to read in the safed (output from earlier simulation) population
    
//    defineConstant("K_p1", 140); //carrying capacity for p1
    
// 	defineConstant("reps", repetition); //This helps me to run the model multiple times with a code block in R.
    
    
}
//
//mateChoice() {
//	females = subpop.individuals[subpop.individuals.sex == "F"]; // Get all females
//	males = subpop.individuals[subpop.individuals.sex == "M"]; // Get all males
//
//	if (individual.sex == "F" & size(males) > 0) {
//		// Compute relatedness to all males
//		relatedness = males.relatedness(individual);
//		
////		// Print relatedness values for debugging
////		for (i in seqLen(size(males))) {
////   	cat("Female " + individual.index + " - Male " + males[i].index + " relatedness: " + relatedness[i] + "\n");
////	}
//
//	bestIndex = which(relatedness == max(relatedness)); // gives out all males which have lowest relatedness value
//	//cat("Best Index = " + bestIndex +  "\n");
//	// Randomly shuffle individuals to prevent bias - this line creates a new list where every individual from p1 gets picked only once
//    shuffledInds = sample(males[bestIndex], size(males[bestIndex]), replace = F);    
//	bestMate = shuffledInds[0];
////	cat(">>> Female " + individual.index + " chooses Male " + bestMate.index +  " with relatedness " + relatedness[bestIndex] + "\n");
//		// Remove selected male from pool
//		males = males[males != bestMate];
//		return bestMate;
//	}
//
//	return NULL;
//}


100037 early() {
	sim.readFromPopulationFile("model2_filteredinds_withsex.trees");
	// p1 now exists, restored from file
   catn("Restored population size: " + size(p1.individuals));
 	//p1.setSubpopulationSize(1000);
	// Randomly select 16 survivors
	//catn("population size: " + size(p1.individuals));
	heterozygosity = calcHeterozygosity(p1.genomes);
	cat("Mean heterozygosity = " + heterozygosity + "\n");
	
	females = p1.individuals[p1.individuals.sex == "F"]; //get all females
	males = p1.individuals[p1.individuals.sex == "M"]; // get all males

	for (fem in females){
	relVals = fem.relatedness(males);
	cat("female id: " + fem.index + " + " + males.index + " with relatedness: " + relVals + "\n" );
	}

}


100037 late(){
	sim.simulationFinished();
	}


//Trying something here to see if mateChoice is working as I want...


////uncomment here to have a K
//100002 : 100030 early() {
//	newSize = asInteger(p1.individualCount * 1.1); //increas popsize every generation by the factor 1.1
//	if (newSize >= K_p1) 
//	{
//		newSize = K_p1;
//	}	
//	p1.setSubpopulationSize(newSize);
//	cat("Population size =" + size(p1.individuals) +  "\n");
//
//
//}

//100001 : 100030 early() {
//	// Print mean heterozygosity across the population
//	heterozygosity = calcHeterozygosity(p1.genomes);
//	cat("Mean heterozygosity = " + heterozygosity + "\n");
//	females = p1.individuals[p1.individuals.sex == "F"]; //get all females
//	males = p1.individuals[p1.individuals.sex == "M"]; // get all males
//	cat("Number of females: " + size(females) + "\n");
//	cat("Number of males: " + size(males) + "\n");
//}
//
//100031 late(){
//	sim.simulationFinished();
//}

