initialize() {
	initializeSLiMModelType("nonWF"); // means that population size can not change dynamically -> WF model
	//turning on pedigree tracking, as relatedness
	initializeSLiMOptions(keepPedigrees = T);
	initializeMutationRate(1e-5); //defining mutation rate
	initializeMutationType("m1", 0.5, "f", 0.0); //mutation type m1 is has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g1", m1, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g1, 0, 99999); //g1 has length 10'000 bases, maybe change -> second genomic element?
	initializeRecombinationRate(1e-7); // specifies recombination rate
	
	initializeSex("A"); //creates males and females in the population

	defineConstant("K_p1", 140); //carrying capacity for p1
}

1 early() {
	//defining population size at the beginning
	sim.addSubpop("p1", 10000); //large starting population of 10'000 individuals
}

//bottleneck kicks in after 100 generations
//100 early() {

100 early() { p1.setSubpopulationSize(16); }
	// Randomly select 16 survivors
 

//Non-ranodom mating for 30 years due to breeding programs

//mating according to the pedigree data...? -> Add later, first/now non-random mating selecting for low kinship

101:130 early() {
	females = subpop.individuals[subpop.individuals.sex == "F"]; //get all females
	males = subpop.individuals[subpop.individuals.sex == "M"]; // get all males
	cat("Number of females: " + size(females) + "\n");
	cat("Number of males: " + size(males) + "\n");
	
	for (ind in females) { 
        	if (size(males) > 0) {
            // Compute relatedness for each male
            relatedness = males.relatedness(ind);
            //Choose the male with the minimum relatedness
            bestMate = males[whichMin(relatedness)]; //searches for the best mate depending on relatedness
				//cat("relatedness" + bestMate.relatedness + "\n");
            //males = males[males != bestMate]; //removes bestMate from the list, so that all males only get to pair once
           return bestMate;
           //cat("female" + ind + "Best Mate: " + bestMate + "\n");
           }
           //cat("Number of individuals: " + size(p1.individuals) + "\n");
				return NULL;  // No valid mate found
				
    //cat("Optimal mate pairings completed.\n");
    reproduction() {
    	//females = p1.individuals[p1.individuals.sex == "F"];  // Get all females
   	//males = p1.individuals[p1.individuals.sex == "M"];  // Get all males
    	//for (ind in females) {
        	//if (size(males) > 0) {
            mate = bestMate;  // Find the best mate
            if (!isNULL(mate)) {
                p1.addCrossed(ind, mate);  // Produce offspring
                males = males[males != mate];  // Remove mate from the list
           	}
        }
    //}
}
//}
    
    
}


     



