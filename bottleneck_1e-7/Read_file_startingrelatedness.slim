//With this file, I want to read in the generated population from the bottleneck model, and look at their starting relatedness and their starting heterozygosity.
//Change the working directory to the place where the .tree file is saved. 

initialize() {

	initializeSLiMOptions(keepPedigrees = T); //Ensables the program to keep track of the ancestry
	initializeMutationRate(1e-7); //define a mutation rate - based on values for the common kingfisher. 
	//here i call my mutations as m0, because of the filtering i did with python. Somehow m0 was used as placeholder for m1. 
	initializeMutationType("m1", 0.5, "f", 0.0); //mutation type m1 is has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g1", m1, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g1, 0, 99999); //g1 has length 10'000 bases
	initializeRecombinationRate(1e-7); // define the recombination rate
	initializeSex("A"); //creates males and females in the population

    initializeTreeSeq(); //this command enables me to read in the saved (output from earlier simulation) population
    
    
}

100001 early() {
	//sim.readFromPopulationFile("16_1e-7_output.trees");
	//sim.readFromPopulationFile("16_1e-6_output.trees");
	//sim.readFromPopulationFile("16_1e-8_output.trees");
	sim.readFromPopulationFile("16_1e-9_output.trees"); //read in the saved population

	// p1 now exists, restored from file
   catn("Restored population size: " + size(p1.individuals));
	heterozygosity = calcHeterozygosity(p1.genomes);
	cat("Mean heterozygosity = " + heterozygosity + "\n");
	
	females = p1.individuals[p1.individuals.sex == "F"]; //get all females
	males = p1.individuals[p1.individuals.sex == "M"]; // get all males

	for (fem in females){
	relVals = fem.relatedness(males);
	cat("female id: " + fem.index + " + " + males.index + " with relatedness: " + relVals + "\n" );
	}

}


100001 late(){
	sim.simulationFinished();
	}


