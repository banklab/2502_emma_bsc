legend("topright",legend = c("Missing Females", "Missing Males"),
lty = 1, col = c("#54BFB7FF", "tan1"), cex = 0.6)
#setwd("~/Documents/GitHub/2502_emma_bsc")
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 1/Model1_100gen_16-1000ind_20reps")
rm(list=ls(all=TRUE)) #clear R environment
#First order the data for the not-random mating, selecting for not-related mates (nrnr)
files_nrnr <- list.files(pattern = "_nonrandom_notrelated_") #list all the files which show this specific pattern in their name.
length(files_nrnr) #check if it worked, the length should be the same amount as repetitions i defined in the first chunks.
#install.packages("hierfstat")
library("hierfstat") #This package helps to analyze the data.
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
#For analyzing another data set - change this command below to the right generation time and output interval, otherwise there will be an error message!!!
row_numbers <- seq(100001, 100100, by = 2) #This command will help me name/define the rows. These are the generations from my SLiM output - I had 100 generations and wrote down the heterozygosity for every second generation - starting with a cycle number of 100001, due to the burnin.
results_df_nrnr <- matrix(NA ,nrow = (length(row_numbers)), ncol = length(files_nrnr)) #create a matrix with NA, to later store my results. The rows are the different generations and the different columns are the repetitions  I did.
rownames(results_df_nrnr) <- c(row_numbers) #name the rows of the newly created matrix
dim(results_df_nrnr) #Check if it has the right dimension.
#for every file in my files_nrnr do...
for(i in 1:length(files_nrnr)){
single_file <- files_nrnr[i] # this is the name of a single SLiM result file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers of the single file to the matrix column names
matched_indices <- match(df$cycle, rownames(results_df_nrnr))
# Assign heterozygosity values to the correct positions in results_df_nrnr (matrix)
results_df_nrnr[matched_indices,i] <- df$Heterozygosity
}
#calculate the mean over all the rows, so the mean for each generation across the different repetitions.
mean_nrnr <- rowMeans(results_df_nrnr, na.rm = TRUE)
#now the same for nonrandom mating selecting for relatedness (nrr)
files_nrr <- list.files(pattern = "_nonrandom_related_")
length(files_nrr)
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100100, by = 2)
results_df_nrr <- matrix(NA ,nrow = (length(row_numbers)), ncol = length(files_nrr))
rownames(results_df_nrr) <- c(row_numbers)
dim(results_df_nrr)
for(i in 1:length(files_nrr)){
single_file <- files_nrr[i] # this is the name of a single SLiM result file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(df$cycle, rownames(results_df_nrr))
# Assign heterozygosity values to the correct positions in results_df_nrr
results_df_nrr[matched_indices,i] <- df$Heterozygosity
}
mean_nrr <- rowMeans(results_df_nrr, na.rm = TRUE)
#and for random
files_r <- list.files(pattern = "_random_")
length(files_r)
## make a dataframe to collect results
## each row in the dataframe corresponds to the results from a single SLiM simulation run
row_numbers <- seq(100001, 100100, by = 2)
#row_names <- paste(row_numbers, "reps", "seed", sep = ";")
results_df_r <- matrix(NA ,nrow = (length(row_numbers)), ncol = length(files_r))
rownames(results_df_r) <- c(row_numbers)
dim(results_df_r)
for(i in 1:length(files_r)){
single_file <- files_r[i] ## this is the name of a single SLiM result file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers to the matrix column names
matched_indices <- match(df$cycle, rownames(results_df_r))
# Assign heterozygosity values to the correct positions in results_df_r
results_df_r[matched_indices,i] <- df$Heterozygosity
}
mean_r <- rowMeans(results_df_r, na.rm = TRUE)
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 1/Model1_100gen_16-1000ind_20reps") #setting the working directory
#install.packages("paletteer")
library(paletteer)
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(results_df_nrnr, results_df_nrr, results_df_r)
min_het <- min(results_df_nrnr, results_df_nrr, results_df_r)
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
#When using another data set - use the correct generation time and output interval in the command below!
x_values <- seq(2, 100, by = 2)
#Here i don't have to transpose the data, since each column is a separate data series - this is what matplot expects.
matplot( x_values, results_df_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05), # Model nrnr: light blue points, alpha.f is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(min_het, max_het), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
#Now I generated the plot and can just add the data of the other models (nrr and r)
# Model nrr: light brown points
matpoints(x_values, results_df_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #adding points to the existing plot from above
# Model r: light orange points
matpoints( x_values, results_df_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #again
# adding Mean relatedness lines to the plot
lines( x_values, mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines( x_values, mean_nrr, col = "#894B33FF", lwd = 2)
lines( x_values, mean_r, col = "tan1", lwd = 2)
#create a legend for my plot
legend("topright", legend=c("non-random non-related", "non-rendom related", "random"), col=c("#54BFB7FF", "#894B33FF", "tan1"), lty=1, cex = 0.7)
#cex = 0.7 makes the legend smaller, lty is for the lines
#first set the working directory - change this to where the output files are saved...
#setwd("~/Documents/GitHub/2502_emma_bsc")
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 2/model2_100reps_8-500ind_100gen_r")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files and list them in a vector
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)  #no header implemented in the output files
data.frame(
relatedness_start   = dat[1, 2], #define the values in the output files
heterozygosity_end  = dat[2, 3]
)
})
# bind all data into one data.frame
df <- do.call(rbind, res_list)
# quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_end,
xlab = "Starting relatedness",
ylab = "End heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# add a linear fit
abline(lm(heterozygosity_end ~ relatedness_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation (to test if there is a correlation between the data)
pearson_res <- cor.test(
df$relatedness_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
library(ggplot2)
ggplot(df, aes(x = relatedness_start, y = heterozygosity_end)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(
x    = "Starting relatedness",
y    = "End heterozygosity",
title= "Relatedness vs Heterozygosity"
) +
theme_minimal()
#first set the working directory
setwd("~/Documents/GitHub/2502_emma_bsc")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files, which have this specific pattern
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
heterozygosity_start   = dat[1, 3],
heterozygosity_end  = dat[2, 3]
)
})
# bind into one data.frame
df <- do.call(rbind, res_list)
# quick base‐R scatterplot
plot(
df$heterozygosity_start,
df$heterozygosity_end,
xlab = "Starting heterozygosity",
ylab = "End heterozygosity",
main = "starting Heterozygosity vs end heterozygosity",
pch = 19
)
heterozygosity_start
#first set the working directory - change this to where the output files are saved...
#setwd("~/Documents/GitHub/2502_emma_bsc")
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 2/model2_100reps_8-500ind_100gen_r")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files and list them in a vector
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)  #no header implemented in the output files
data.frame(
relatedness_start = dat[1, 2], #define the values in the output files
heterozygosity_end = dat[2, 3]
)
})
# bind all data into one data.frame
df <- do.call(rbind, res_list)
# quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_end,
xlab = "Starting relatedness",
ylab = "End heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# add a linear fit
abline(lm(heterozygosity_end ~ relatedness_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation (to test if there is a correlation between the data)
pearson_res <- cor.test(
df$relatedness_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
#first set the working directory
#setwd("~/Documents/GitHub/2502_emma_bsc")
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 2/model2_100reps_8-500ind_100gen_r")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files, which have this specific pattern
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the end
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
heterozygosity_start   = dat[1, 3],
heterozygosity_end  = dat[2, 3]
)
})
# bind into one data.frame
df <- do.call(rbind, res_list)
# quick base‐R scatterplot
plot(
df$heterozygosity_start,
df$heterozygosity_end,
xlab = "Starting heterozygosity",
ylab = "End heterozygosity",
main = "starting Heterozygosity vs end heterozygosity",
pch = 19
)
# add a linear fit
abline(lm(heterozygosity_end ~ heterozygosity_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$heterozygosity_start,
df$heterozygosity_end,
method = "pearson"
)
print(pearson_res)
#first set the working directory
#setwd("~/Documents/GitHub/2502_emma_bsc")
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 2/model2_100reps_8-500ind_100gen_r")
rm(list=ls(all=TRUE)) #clear R environment
# find all the SLiM output files with this specific pattern
files <- list.files(pattern = "model2_reps")
# loop through and extract metrics -> I want relatedness at the beginning and heterozygosity at the beginning
res_list <- lapply(files, function(f){
dat <- read.table(f, header = FALSE)
data.frame(
relatedness_start   = dat[1, 2],
heterozygosity_start  = dat[2, 2]
)
})
# bind into one data.frame
df <- do.call(rbind, res_list)
# quick base‐R scatterplot
plot(
df$relatedness_start,
df$heterozygosity_start,
xlab = "Starting relatedness",
ylab = "starting heterozygosity",
main = "Relatedness vs Heterozygosity",
pch = 19
)
# add a linear fit
abline(lm(heterozygosity_start ~ relatedness_start, data = df), col = "#54BFB7FF")
# Pearson’s correlation
pearson_res <- cor.test(
df$relatedness_start,
df$heterozygosity_start,
method = "pearson"
)
print(pearson_res)
rm(list=ls(all=TRUE)) #clear R environment
#if the model was run on the cluster - use this command
#setwd("/tmp/server_data_model2.1")
setwd("~/Documents/GitHub/2502_emma_bsc/MODEL 2.1/model2.1_50reps")
#list all files with this specific pattern
slim_out_files <- list.files(pattern = "model2.1_reps_")
#check if it got all files
length(slim_out_files)
#install.packages("hierfstat")
library("hierfstat")
# make a dataframe to collect results (matrix)
# each row in the dataframe corresponds to the results from a single repetition of the SLiM simulation
row_numbers <- seq(100001, 100139, by = 1) #the values correspond to the generations in the files
#add columns for each file, with additional ones for repetition and the seed of the simulation
results_df <- matrix(NA ,nrow = length(slim_out_files), ncol = (length(row_numbers) + 2))
colnames(results_df) <- c(row_numbers,"reps","seed")
length(c(row_numbers,"reps","seed"))
dim(results_df) #check if it has the dimensions it should have
#then apply these things to all the files stored in the vector
for(i in 1:length(slim_out_files)){
single_file <- slim_out_files[i] # this is the name of a single SLiM result file
get_the_reps <- as.numeric(gsub(".*_reps_([0-9]+)_.*", "\\1", single_file))  #use gsub() to get the value of 'reps' that we saved in the name of the results file
get_the_seed <- as.numeric(gsub(".*_seed =|\\.csv","",single_file)) ## and for the seed....
results_df[i,"reps"] <- get_the_reps ## record the value of 'r' for this particular results file
#.*_reps_ → Matches everything before _reps_
#([0-9]+) → Captures one or more digits (the reps number)
#_.* → Matches everything after the number (so it gets removed)
#"\\1" → Extracts only the number inside ().
results_df[i,"seed"] <- get_the_seed # record the seed for this particular results file
# Read the CSV file, ensure that it recognizes the header
df <- read.csv(single_file, header = TRUE)
# Ensure the column names are correct
colnames(df) <- c("cycle", "Heterozygosity")
# Match cycle numbers (generations) to the matrix column names
matched_indices <- match(as.character(df$cycle), colnames(results_df))
# Assign heterozygosity values to the correct positions in results_df_nrnr
results_df[i, matched_indices] <- df$Heterozygosity
}
# Calculate column means (excluding the last two columns: "reps" and "seed")
column_means <- colMeans(results_df[, 1:(ncol(results_df)-2)], na.rm = TRUE)
# Create a new row with the mean values,  NA for "reps" and "seed" columns
mean_row <- c(column_means, NA, NA)
# Bind the new row to the bottom of results_df_nrnr
results_df <- rbind(results_df, mean_row)
# Assign row names
rownames(results_df)[nrow(results_df)] <- "Mean"
# Print the final matrix with the mean row
print(results_df)
#write.csv(results_df, "Results_nonrandom_notrelated.csv", row.names = F) #write a file with my results
#install.packages("paletteer")
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i have to transpose the data, since each row is a separate data series - matplot expects the columns to be seperate data series.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly
type = "p", pch = 16, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.02), # Model nrnr: light blue points, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
#This would be create a line for the mean value
#lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(t(heterozygosity_only), 1, median, na.rm = TRUE)
p25 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.75, na.rm = TRUE))
#draw the lines
lines(x_values, med, col = "tan1", lwd = 2.5, lty = 1)
lines(x_values, p25, col = "#894B33FF", lwd = 2, lty = 3) #dashed, smaller lines for quartiles
lines(x_values, p75, col = "#894B33FF", lwd = 2, lty = 3)
#Add a line to show the bottleneck at generation 35
abline(v = 35,        # at generation 35
lty = 3,       # dashed line
col = "red",   #color
lwd = 1)       # line width
legend("topright",
legend = c("all data", "median", "25% & 75% quartile"),
col    = c("#54BFB7FF",    "tan1",  "#894B33FF"),
pch    = c(16,            NA,       NA),    # point symbol for first, none for others
lty    = c(NA,             1,        3),    # no line for first, solid and dashed for rest
lwd    = c(NA,            2.5,       2),    # no line‐width for first
pt.cex = c(0.5,           NA,       NA),    # enlarge the point
cex    = 0.6)
library(paletteer)
# Extract the heterozygosity values (excluding the last row "Mean" and last two columns "reps" & "seed")
heterozygosity_values <- results_df[1:(nrow(results_df)-1), 1:(ncol(results_df)-2)]
# Extract the mean heterozygosity values from the last row --> Last row, so we can use nrow
mean_values <- results_df[nrow(results_df), 1:(ncol(results_df)-2)]
# Create a vector for the x-values (generations) - this will be used for the x axis of the plot.
x_values <- 1:139
heterozygosity_only <- heterozygosity_values[, 1:length(x_values)]
#I did this to cut off the last two columns (seed and rep) --> Due to this, i can then apply the filter (next lines) to the matrix. Otherwise it would not match the dimension of cycle_numbers...
#find the highest and lowest heterozygosity values across all three matrices. This will help me with the y axis of the plot i want to generate.
max_het <- max(heterozygosity_only)
min_het <- min(heterozygosity_only)
#Here i have to transpose the data, since each row is a separate data series - matplot expects the columns to be seperate data series.
matplot( x_values, t(heterozygosity_only), # Transpose to align data correctly
type = "l", lwd = 1, cex = 0.4,
col = adjustcolor("#54BFB7FF", alpha.f = 0.1), # Model nrnr: light blue points, alpha is the transparacy
xlab = "Generation", ylab = "Heterozygosity", #name the axis
ylim = c(0,0.004), main = "Heterozygosity over Generations")  #define the y axis and give the plot a title
#This would be create a line for the mean value
#lines( x_values, mean_values, col = "#54BFB7FF", lwd = 2.5)
#Compute median & quartiles (25 and 75 %)
#the 1 means i want to apply the functions over the rows of my table and ignoring NA values (na.rm = TRUE)
med <- apply(t(heterozygosity_only), 1, median, na.rm = TRUE)
p25 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.25, na.rm = TRUE))
p75 <- apply(t(heterozygosity_only), 1, function(x) quantile(x, 0.75, na.rm = TRUE))
#draw the lines
lines(x_values, med, col = "tan1", lwd = 2.5, lty = 1)
lines(x_values, p25, col = "#894B33FF", lwd = 2, lty = 3) #dashed, smaller lines for quartiles
lines(x_values, p75, col = "#894B33FF", lwd = 2, lty = 3)
# visualize the data series with the best outcome
# Find the index of the series with the highest final value (at generation 139)
idx_max_end <- which.max(heterozygosity_only[, 139])
#make best outcome visible in the plot - black line
lines(x_values, heterozygosity_only[idx_max_end, ], col = adjustcolor("black", alpha.f = 0.6), lwd = 1)
# visualize the data series with the highest het in generation 35 (after bottleneck)
idx_max_bn <- which.max(heterozygosity_only[, 35])
#make it visible in the plot - blue line
lines(x_values, heterozygosity_only[idx_max_bn, ], col = adjustcolor("blue", alpha.f = 0.6), lwd = 1)
# visualize the data series with the lowest het in generation 1 (start of the simulation)
idx_min_start <- which.min(heterozygosity_only[, 1])
#make the outcome visible in the plot - purple line
lines(x_values, heterozygosity_only[idx_min_start, ], col = adjustcolor("purple", alpha.f = 0.6), lwd = 1)
# visualize the data series with the lowest het in generation 35 (after bottleneck)
idx_min_bn <- which.min(heterozygosity_only[, 35])
#make the outcome visible in the plot - pink line
lines(x_values, heterozygosity_only[idx_min_bn, ], col = adjustcolor("pink", alpha.f = 0.9), lwd = 1)
#Add a line to show the bottleneck at generation 35
abline(v = 35,        # at generation 35
lty = 3,       # dashed line
col = "red",   #color
lwd = 1)       # line width
legend("topright",
legend = c("all data", "median", "25% & 75% quartile", "best outcome", "highest het in gen 35", "lowest het gen 1", "lowest het gen 35"),
col    = c("#54BFB7FF",    "tan1",  "#894B33FF", "black", "blue", "purple", "pink"),
lty    = c(1, 1, 3, 1, 1, 1, 1),    # no line for first, solid and dashed for rest
lwd    = c(1, 2.5, 2, 1, 1, 1, 1),    # no line‐width for first
cex    = 0.4)
#change the working directory to where the output files have been saved.
#First I start with the data of the non-random selecting for non-relatedness (nrnr) model
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-16ind_100gen")
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-1000ind_100gen")
setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_1000-1000ind_100gen")
rm(list=ls(all=TRUE)) #clear R environment
files_nrnr <- list.files(pattern = "_heterozygosity_nrnr_") #list all files with this pattern in the name
length(files_nrnr) #check if it got all the files
#This will create a list of data frames, where every element is a replicate. Each replicate will have the column: Generation, Relatedness and heterozygosity.
rep_data_nrnr <- lapply(files_nrnr, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
})
#lapply is a command which applies a function to all the elements in a vector - So here it names the columns of every file, stored in files_nrnr
# Assume all replicates have the same generations - define the generations to later plot them
generations <- rep_data_nrnr[[1]]$generation
# Extract relatedness into a new matrix: each column = one replicate
rel_matrix_nrnr <- sapply(rep_data_nrnr, function(df) df$relatedness)
#Specifically this tells R: Go through every element "df" in the list rep_data_nrnr, and extract the relatedness column.
# Compute mean relatedness per generation
rel_mean_nrnr <- rowMeans(rel_matrix_nrnr)
#Now do the same for heterozygosity
het_matrix_nrnr <- sapply(rep_data_nrnr, function(df) df$heterozygosity) #create a new matrix for all heterozygosity values
het_mean_nrnr <- rowMeans(het_matrix_nrnr)
#And now again all this for the data of the model which has non-random mating selecting for relatedness (nrr)
files_nrr <- list.files(pattern = "_heterozygosity_nrr_")
length(files_nrr)
rep_data_nrr <- lapply(files_nrr, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
})
rel_matrix_nrr <- sapply(rep_data_nrr, function(df) df$relatedness)
rel_mean_nrr <- rowMeans(rel_matrix_nrr)
het_matrix_nrr <- sapply(rep_data_nrr, function(df) df$heterozygosity)
het_mean_nrr <- rowMeans(het_matrix_nrr)
#And now again all this for the data of the model which has random mating (r)
files_r <- list.files(pattern = "_heterozygosity_r_")
length(files_r)
rep_data_r <- lapply(files_r, function(f) {
read.table(f, col.names = c("generation", "relatedness", "heterozygosity"))
}) #lapply: apply a function over a list
rel_matrix_r <- sapply(rep_data_r, function(df) df$relatedness)
rel_mean_r <- rowMeans(rel_matrix_r)
het_matrix_r <- sapply(rep_data_r, function(df) df$heterozygosity)
het_mean_r <- rowMeans(het_matrix_r)
#change the working directory to where the data is saved!
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-16ind_100gen")
#setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_16-1000ind_100gen")
setwd("~/Documents/GitHub/2502_emma_bsc/RELATEDNESS-HETEROZYGOSITY/Relatedness_heterozygosity_10reps_1000-1000ind_100gen")
par(mfrow = c(1, 2)) #To have 2 plots shown at once
par(mfrow = c(1, 2), oma = c(2, 0, 1, 0))  # oma = outer margin area (bottom, left, top, right), leaves space for a title and some space at the bottom to add a legend outside of the plots.
par(mgp = c(1.8, 0.7, 0)) #This is to decrease the distance of the axis labels to the axis.
par(cex.lab = 0.8, cex.axis = 0.7, cex.main = 1) #this helps me rescaling the size of the labels
# find global max and min of both matrices - this will be useful for the ylim of the graph
max_rel <- max(rel_matrix_nrnr, rel_matrix_nrr, rel_matrix_r)
min_rel <- min(rel_matrix_nrnr, rel_matrix_nrr, rel_matrix_r)
# Model nrnr: light blue points
#Here i dont have to transpose the data, since each column is a separate data series - this is what matplot expects...
matplot(generations, rel_matrix_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05), #alpfa.f makes the points transparent
xlab = "Generation", ylab = "Relatedness",
ylim = c(min_rel, max_rel))  #define the y axis
# Model nrr: light brown points
matpoints(generations, rel_matrix_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #adding points to the existing plot from above
# Model r: light orange points
matpoints(generations, rel_matrix_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #again
# adding Mean relatedness lines to the plot
lines(generations, rel_mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines(generations, rel_mean_nrr, col = "#894B33FF", lwd = 2)
lines(generations, rel_mean_r, col = "tan1", lwd = 2)
#And now exactly the same but for the heterozygosity values
# find global max and min
max_het <- max(het_matrix_nrnr, het_matrix_nrr, het_matrix_r)
min_het <- min(het_matrix_nrnr, het_matrix_nrr, het_matrix_r)
# Model nrnr: light blue points
matplot(generations, het_matrix_nrnr, type = "p", pch = 16,
col = adjustcolor("#54BFB7FF", alpha.f = 0.05),
xlab = "Generation", ylab = "Heterozygosity",
ylim = c(min_het, max_het))
# Model nrr: light brown points
matpoints(generations, het_matrix_nrr, pch = 16, col = adjustcolor("#894B33FF", alpha.f = 0.05)) #add points
# Model r: light orange points
matpoints(generations, het_matrix_r, pch = 16, col = adjustcolor("tan1", alpha.f = 0.05)) #add points
# adding Mean relatedness lines to the plot
lines(generations, het_mean_nrnr, col = "#54BFB7FF", lwd = 2)
lines(generations, het_mean_nrr, col = "#894B33FF", lwd = 2)
lines(generations, het_mean_r, col = "tan1", lwd = 2)
mtext("Relatedness and Heterozygosity Over Time", side = 3, line = -2, outer = TRUE, cex = 1.2) #creates a shared title
par(xpd = NA) #Allows drawing outside of the plot - this is for the legend
legend("bottom", inset = c(0, -0.6), horiz = FALSE,
legend = c("not-random not-related", "not-random related", "random"),
col = c("#54BFB7FF", "#894B33FF", "tan1"),
lwd = 2, bty = "n", cex = 0.6)
#inset: Pushes it down below the plot
