initialize() {
	initializeSLiMModelType("WF"); // means that population size can not change dynamically -> WF model
	//turning on pedigree tracking, as relatedness
	initializeSLiMOptions(keepPedigrees = T); // Track ancestry
	initializeMutationRate(1e-7); //defining mutation rate
	initializeMutationType("m1", 0.5, "f", 0.0); //mutation type m1 is has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g1", m1, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g1, 0, 99999); //g1 has length 10'000 bases, maybe change -> second genomic element?
	initializeRecombinationRate(1e-7); // specifies recombination rate
	
    initializeTreeSeq(); //this command enables me to read in the safed (output from earlier simulation) population

	initializeSex("A"); //creates males and females in the population
	
	defineConstant("reps", repetition); //This helps me to run the model multiple times with a code block in R.
	defineConstant("simID", "_seed =" + getSeed()); // create a variable that contains the seed of the run, to make it repeatable... This will be visible in the output file!

}

//With the mateChoice command i can specify a specific pattern for matings. This one is a random mating command, but still i use the mateChoice command, to make it similar to my other models.  
mateChoice() {
	females = subpop.individuals[subpop.individuals.sex == "F"]; //get all females
	males = subpop.individuals[subpop.individuals.sex == "M"]; // get all males

	// Randomly shuffle individuals to prevent bias - this line creates a new list where every male gets picked only once
	shuffledInds = sample(males, size(males), replace = F);
	//Take first individual from that list as mate
	bestMate = shuffledInds[0];

	return bestMate;

}



100001 early() {
	//This command uploads the saved file from a previous simulation into this model and sets those individuals as my p1
	sim.readFromPopulationFile("16_1e-7_output.trees"); // p1 now exists, restored from file - those are my 16 saved individuals
	//sim.readFromPopulationFile("1000_1e-7_output.trees"); // p1 now exists, restored from file - those are my 1000 saved individuals
}


100001: 100100 early() {


//define some parameters to calculate relatedness over the whole population	
	inds = p1.individuals;
   N = size(inds);
	totalRel = 0.0;
   count = 0;	
	
	for (i in seqLen(N - 1)) {
        for (j in seq(i + 1, N - 1)) {
            totalRel = totalRel + inds[i].relatedness(inds[j]); //sum up the relatedness over the whole population -> for every pair, the relatedness value is added and after divided by the number of pairs (count)
            count = count + 1;
        }
    }
    meanRel = (count > 0) ? (totalRel / count) else 0.0; //If the count is greater than 0, set meanRel to (totalRel/count), otherwise put it to 0
    het = calcHeterozygosity(p1.genomes); //Calculate the genomewide heterozygosity over the whole population (all genomes of p1)

	//Now i want the meanRel and the het printed out in a file for every generation. In the name of the file there should be the model name (relatedness_heterozygosity_r_), the current repetition (1-10) as well as the seed for the current simulation. 
   writeFile("/storage/scratch/users/eo20t062/rel_het_model1/outputs_16/relatedness_heterozygosity_r_" + "reps_" + reps + simID + ".txt", sim.cycle + "\t" + meanRel + "\t" + het + "\n", append=T);
}