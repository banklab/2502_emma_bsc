
initialize() {

	initializeSLiMOptions(keepPedigrees = T);
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-7);
	initializeSex("A"); //creates males and females in the population

    initializeTreeSeq();


	defineConstant("reps", repetition);

}

//maybe add n uneven sex ratio!! this is now not implemented...
//Also not sure about the sexes at the beginning --> define this and also one par of siblings at the start!!!


mateChoice() {
// Prefer relatives as mates
	females = subpop.individuals[subpop.individuals.sex == "F"]; //get all females
	males = subpop.individuals[subpop.individuals.sex == "M"]; // get all males

    if (individual.sex == F & size(males) > 0) {  // If female
      // Compute relatedness for each male
		relatedness = males.relatedness(individual);
      // Choose the male with the minimum relatedness
		bestMate = males[whichMin(relatedness)]; //searches for the best mate depending on relatedness
		males = males[males != bestMate]; //removes bestMate from the list, so that all males only get to pair once
		return bestMate;
	}
   
		return NULL;  // No valid mate found
}

100001 early() {
//	sim.addSubpop("p1", 16);
	sim.readFromPopulationFile("final_output.trees"); // p1 now exists, restored from file
   catn("Restored population size: " + size(p1.individuals)); //prints out the number of individuals I have...
	defineConstant("simID", "_seed =" + getSeed()); // create a variable that contains the seed of the run, to make it repeatable... This will be visible in the output file!
	log = community.createLogFile("sim_log_nonrandom_notrelated_" + "reps_" + reps + simID  + ".csv", logInterval=10);
//	log = community.createLogFile("sim_log_nonrandom_notrelated" + ".csv", logInterval=10);
	log.addCycle();
	log.addCustomColumn("Heterozygosity", "calcHeterozygosity(p1.genomes);");
}

100001:100499 early() {
	newSize = asInteger(p1.individualCount * 1.1); //increas popsize every generation by the factor 1.1
	if (newSize >= 500) 
	{
			newSize = 500;
	}	
	p1.setSubpopulationSize(newSize);
	cat("Population size =" + size(p1.individuals) +  "\n");
}

100500 late() {
// Print mean heterozygosity across the population
	heterozygosity = calcHeterozygosity(p1.genomes);
	cat("Mean heterozygosity = " + heterozygosity + "\n");
//	sim.output(sim.mutationsOfType(m1),"slim_output_" + "reps_" + reps +"_"+ simID  + ".csv");


}



