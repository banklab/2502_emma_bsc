//This is my first model. With this model I want to test if my mateChoice callbacks behave as I wish and also how different mateChoices will influence the heterosygosity of the whole population. 
//This file is for a recombination rate of 1e-7

//First I have to initialize the simulation and define some parameters. 
initialize() {

	initializeSLiMOptions(keepPedigrees = T); //Enables the program to keep track of the ancestry
	initializeMutationRate(1e-7); //define a mutation rate - based on the mutation rate of the common kingfisher
	initializeMutationType("m1", 0.5, "f", 0.0); //define a mutation type m1 which has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g1", m1, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g1, 0, 99999); //g1 has length of 10'000 bases
	initializeRecombinationRate(1e-7); // define the recombination rate
	initializeSex("A"); //creates males and females in the population

    initializeTreeSeq(); //this command enables me to read in the saved (output from earlier simulation) population


	defineConstant("reps", repetition); //This helps me to run the model multiple times with a code block in R.

}


//With the mateChoice command i can specify a specific pattern for matings. This one is a non-random mating, selecting mates with the highest relatedness. (nrr)
mateChoice() {
	females = subpop.individuals[subpop.individuals.sex == "F"]; //get all females
	males = subpop.individuals[subpop.individuals.sex == "M"]; // get all males

//the mateChoice() randomly picks a female of the population and then based on the mateChoice command pickes a male from the population as mate. 

      // Compute relatedness for each male to the chosen female (individual)
	relatedness = males.relatedness(individual);
		
	bestIndex = which(relatedness == max(relatedness)); // gives out the lowest relatedness value
			
		// this line creates a new list where every male with the lowest relatedness (bestIndex) gets picked only once - They are randomly shuffled  to prevent bias
		shuffledInds = sample(males[bestIndex], size(males[bestIndex]), replace = F); 	
		
		//Take first male from that list as mate
		bestMate = shuffledInds[0];

		return bestMate;
}

100001 early() {
	sim.readFromPopulationFile("16_1e-7_output.trees"); // p1 now exists, restored from the .tree file 
   catn("Restored population size: " + size(p1.individuals)); //prints out the number of individuals I have...
	defineConstant("simID", "_seed =" + getSeed()); // creates a variable that contains the seed of the run, to make it repeatable... This will be visible in the output file!
	
	log = community.createLogFile("/storage/homefs/eo20t062/all_stuff/model1/slim_output/sim_log_nonrandom_related_" + "reps_" + reps + simID  + ".csv", logInterval=5); //This creates my file - the name of the file contains the name of the model, the current repetition and the seed of the current simulation. The output is saved for every fifth generation (logInterval = 5)
	//Everything infront of sim_log_... is the path to where i want to save the generated files on the server

	log.addCycle(); //This adds the generations to my file
	log.addCustomColumn("Heterozygosity", "calcHeterozygosity(p1.genomes);"); //here i create a column "Heterozygosity" in my file to save the generated values of heterozygosity
}

100001:101000 early() {
	newSize = asInteger(p1.individualCount * 1.08); //increase popsize every generation by the factor 1.08 with a carrying capacity of "newSize" (1000 individuals)
	if (newSize >= 1000) 
	{
			newSize = 1000;
	}	
	p1.setSubpopulationSize(newSize); //Population cannot get bigger than "newSize"
	
	//cat("Population size =" + size(p1.individuals) +  "\n"); //print out the population size in each generation
	
	heterozygosity = calcHeterozygosity(p1.genomes); //calculate the heterozygosity over the whole population
	//cat("Mean heterozygosity = " + heterozygosity + "\n"); //print the heterozygosity values
}


//I now changed log interval and simulation time (before 2 and 100100)