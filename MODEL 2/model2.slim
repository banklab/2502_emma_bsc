//This is my second model. With this model I first want to recreate the history of the sihek: After the bottleneck has sets the equilibrium population to 16 individuals, they mate based on low relatedness for 35 ?? years. This was done in different breeding facilities, increasing the population size to 140 individuals. After this, I want to simulate different reintroduction strategies. 8??? Individuals are picked from the captive population to be introduced to the wild. There they will mate at random. 


initialize() {

	initializeSLiMOptions(keepPedigrees = T); //Ensables the program to keep track of the ancestry
	initializeMutationRate(1e-7); //define a mutation rate - based on values for the common kingfisher. 
	initializeMutationType("m1", 0.5, "f", 0.0); //mutation type m1 is has dominance coefficient 0.5 and is neutral (fitness 0.0)
	initializeGenomicElementType("g1", m1, 1.0); //genomic element type g1 is initialized with mutation type m1 and base mutation rate
	initializeGenomicElement(g1, 0, 99999); //g1 has length 10'000 bases
	initializeRecombinationRate(1e-7); // define the recombination rate
	initializeSex("A"); //creates males and females in the population

    initializeTreeSeq(); //this command enables me to read in the safed (output from earlier simulation) population
    
    defineConstant("K_p1", 140); //carrying capacity for p1
    
// 	defineConstant("reps", repetition); //This helps me to run the model multiple times with a code block in R.
    
    
}

100001 early() {
	sim.readFromPopulationFile("final_output.trees"); // p1 now exists, restored from file
   catn("Restored population size: " + size(p1.individuals)); //prints out the number of individuals I have...
//	defineConstant("simID", "_seed =" + getSeed()); // creates a variable that contains the seed of the run, to make it repeatable... This will be visible in the output file!
}

100001:100035 mateChoice(){
	females = subpop.individuals[subpop.individuals.sex == "F"]; //get all females
	males = subpop.individuals[subpop.individuals.sex == "M"]; // get all males

      // Compute relatedness for each male
		relatedness = males.relatedness(individual);
		
		bestIndex = which(relatedness == min(relatedness)); // gives out the lowest relatedness value
			
		// Randomly shuffle individuals to prevent bias - this line creates a new list where every male with lowest relatedness gets picked only once
		shuffledInds = sample(males[bestIndex], size(males[bestIndex]), replace = F); 	
		
		//Take first individual from that list as mate
		bestMate = shuffledInds[0];
		
		//cat(">>> Female " + individual.index + " chooses Male " + bestMate.index +  " with relatedness " + bestMate.relatedness(individual) + " at generation " + sim.cycle + "\n");	 //This command prints out which individuals mated in each generation. 
		return bestMate;
	}
   

100001:100035 early() {
	newSize = asInteger(p1.individualCount * 1.08); //increas popsize every generation by the factor 1.1 --> Does this happen by mating??
	if (newSize >= K_p1) 
	{
		newSize = K_p1;
	}	
	p1.setSubpopulationSize(newSize);
	cat("Population size =" + size(p1.individuals) +  "\n");

}

100036 early() {
    
 // Make a new subpopulation p2 with zero individuals
    //sim.addSubpop("p2", 2);

    // keep track of who is still "remaining" in p1 for partner selection
    remaining = p1.individuals;
    remainingfemales = p1.individuals[p1.individuals.sex == "F"]; //get all females
	 remainingmales = p1.individuals[p1.individuals.sex == "M"]; // get all males

    // Randomly pick 4 focal individuals (we assume p1 has >= 8 total)
    randomfemales = sample(remainingfemales, 4);

    chosenForP2 = c();  // We'll store the 4 pairs here (8 total)

    // For each focal, pick the single highest‐related partner
    for (focal in randomfemales) {
        // Compute relatedness of focal to the entire remaining set
        relVals = focal.relatedness(remainingmales);
        
        // Identify the single highest‐related individual
        maxVal = max(relVals);
        idxPartner = which(relVals == maxVal)[0]; // pick first if multiple ties
        partner = remainingmales[idxPartner];

        // Record the pair
        chosenForP2 = c(chosenForP2, focal, partner);

        // Remove the partner from 'remaining' so they won't be paired again
        remainingfemales = remainingfemales[remainingfemales != focal];
        remainingmales = remainingmales[remainingmales != partner];


    cat("chosen pair: " + focal.index + " + " + partner.index + " with relatedness: " + maxVal + "\n" );
    }

	    cat("indexes:" +  chosenForP2.index +   "\n" );
	     writeFile("model2_" + "individuals" + ".txt",   chosenForP2.index +  "\n", append=T);

}

100036 late() {

// Remember all individuals so that their metadata is saved in the tree sequence:
//sim.treeSeqOutput("model2.trees", simplify=F);
sim.treeSeqOutput("model2.trees");



	sim.simulationFinished();
		
		}